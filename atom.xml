<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[One Night in Mok's Studio]]></title>
  <subtitle><![CDATA[Life is a beautiful struggle.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://moky.cc/"/>
  <updated>2015-05-12T01:09:55.644Z</updated>
  <id>http://moky.cc/</id>
  
  <author>
    <name><![CDATA[Moky]]></name>
    <email><![CDATA[mokyue@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[自定义QScrollBar样式]]></title>
    <link href="http://moky.cc/2015/05/11/%E8%87%AA%E5%AE%9A%E4%B9%89QScrollBar%E6%A0%B7%E5%BC%8F/"/>
    <id>http://moky.cc/2015/05/11/自定义QScrollBar样式/</id>
    <published>2015-05-11T04:36:25.000Z</published>
    <updated>2015-05-11T05:43:54.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>QScrollBar是Qt日常开发里使用得比较频繁的一个控件，默认的系统样式已经无法满足开发需求，所以我们就需要定义QSS样式自定义QScrollBar的样式了。QScrollBar主要由handle、add-line、sub-line、add-page、sub-page、up-arrow和down-arrow几部分组成，以下为常用的QScrollBar样式设置。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">QScrollBar</span></div><div class="line"><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> transparent</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">8px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">QScrollBar</span><span class="pseudo">::handle</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#6c7bad</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">QScrollBar</span><span class="pseudo">::handle</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#6a7fc5</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">QScrollBar</span><span class="pseudo">::handle</span><span class="pseudo">:pressed</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#5b75cb</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">QScrollBar</span><span class="pseudo">::add-line</span>, <span class="tag">QScrollBar</span><span class="pseudo">::sub-line</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> transparent</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">QScrollBar</span><span class="pseudo">::add-page</span>, <span class="tag">QScrollBar</span><span class="pseudo">::sub-page</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> transparent</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">QScrollBar</span><span class="pseudo">::up-arrow</span>, <span class="tag">QScrollBar</span><span class="pseudo">::down-arrow</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> transparent</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>运行结果：<br><img src="QScrollBar-qss.png" alt="QScrollBar-qss.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>QScrollBar是Qt日常开发里使用得比较频繁的一个控件，默认的系统样式已经无法满足开发需求，所以我]]>
    </summary>
    
      <category term="QSS" scheme="http://moky.cc/tags/QSS/"/>
    
      <category term="QScrollBar" scheme="http://moky.cc/tags/QScrollBar/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义QTabWidget样式]]></title>
    <link href="http://moky.cc/2015/05/10/%E8%87%AA%E5%AE%9A%E4%B9%89QTabWidget%E6%A0%B7%E5%BC%8F/"/>
    <id>http://moky.cc/2015/05/10/自定义QTabWidget样式/</id>
    <published>2015-05-10T05:27:38.000Z</published>
    <updated>2015-05-11T06:19:35.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>记录一下如果用<code>QSS</code>实现如下效果的<code>QTabWidget</code>控件:<br><img src="result.png" alt="效果图"></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">QTabWidget</span><span class="id">#tabWidget</span><span class="pseudo">:pane</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ffffff</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="tag">QTabBar</span><span class="pseudo">:tab</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">border-image</span>:<span class="value"> <span class="function">url</span>(:/tab-normal.png)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">90px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">35px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#999999</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">12px</span> <span class="string">"Microsoft Yahei"</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="tag">QTabBar</span><span class="pseudo">:tab</span><span class="pseudo">:selected</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">border-image</span>:<span class="value"> <span class="function">url</span>(:/tab-selected.png)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#333333</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="tag">QTabBar</span><span class="pseudo">:tab</span><span class="pseudo">:hover</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#333333</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>图片资源: <code>PS: 图片资源右边有一条浅灰色的竖线以区分每个Tab，可以调整QTabWidget宽度使最后一个Tab不显示这条竖线 :)</code><br><img src="tab-normal.png" alt="tab-normal.png"></p>
<p><img src="tab-selected.png" alt="tab-selected.png"></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>记录一下如果用<code>QSS</code>实现如下效果的<code>QTabWidget</code]]>
    </summary>
    
      <category term="QSS" scheme="http://moky.cc/tags/QSS/"/>
    
      <category term="QTabWidget" scheme="http://moky.cc/tags/QTabWidget/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Notepad++命令行参数]]></title>
    <link href="http://moky.cc/2015/05/09/Notepad-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    <id>http://moky.cc/2015/05/09/Notepad-命令行参数/</id>
    <published>2015-05-09T08:48:50.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html" title="http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html" target="_blank" rel="external">http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.html</a></p>
</blockquote>
<p><code>Notepad++.exe [-multiInst] [-noPlugin] [-ro] [-nosession] [-notabbar] [-n##] [-l$$$] [FILES]</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Notepad++ 支持命令行参数。以下就是 Notepad++ 支持的命令行选项（区分大小写）： p&gt;</div><div class="line"></div><div class="line">-<span class="ruby">n行号</span></div><div class="line">    文件打开后光标所在的行号.</div><div class="line">-<span class="ruby">c</span></div><div class="line">    启动列编辑模式.</div><div class="line">-<span class="ruby">-help</span></div><div class="line">    显示命令行帮助，比如命令行的格式</div><div class="line">-<span class="ruby">loadingTime</span></div><div class="line">    显示 Notepad++ 打开所有文件所消耗的时间.结果以对话框形式显示，时间精确到0.01秒。</div><div class="line">-<span class="ruby">multiInst</span></div><div class="line">    允许多个 Notepad++ 同时运行。默认情况下，如果 Notepad++ 已经运行的话，文件将会由此 Notepad++ 实例打开，如果开启了多实例模式，文件由新的 Notepad++ 实例打开.</div><div class="line">-<span class="ruby">noPlugin</span></div><div class="line">    不加载任何插件。如果你担心插件可能不安全，或者不想加载任何插件的话，可以使用此选项.</div><div class="line">-<span class="ruby">ro</span></div><div class="line">    所有的文件都以只读模式打开.</div><div class="line">-<span class="ruby">nosession</span></div><div class="line">    在 Notepad++ 启动后不加载之前保持的会话.在 Notepad++ 退出时也不保持当前会话。</div><div class="line">-<span class="ruby">notabbar</span></div><div class="line">    隐藏工具栏</div><div class="line">-<span class="ruby">systemtray</span></div><div class="line">    Notepad++ 启动后最小化到托盘，也称作 通知区域。</div><div class="line">-<span class="ruby">x行号</span></div><div class="line">    指定Notepad++启动后光标所在的行号</div><div class="line">-<span class="ruby">y列号</span></div><div class="line">    指定 Notepad++ 启动后光标所在的列号.</div><div class="line">-<span class="ruby">l语言缩写名</span></div><div class="line">    指定文件的语言格式. $$$ 表示以下任意一种语言的缩写字符串:</div><div class="line">    normal, php, c, cpp, cs, objc, d, java, rc, html, xml, makefile, pascal, batch, ini, nfo, asp, sql, vb, javascript, css, perl, python, lua, tex, cobol, fortran, bash, actionscript, nsis, tcl, lisp, scheme, asm, diff, props, postscript, ruby, smalltalk, vhdl, kix, autoit, Gui4Cli, powershell, caml, ada, verilog, matlab, haskell, inno, cmake, yaml,r, jsp</div><div class="line">    命令行的其他参数都将被当作文件名。总是把你的文件名用引号括起来，以防你的文件中包含空格时，Notepad++ 将其分割为多个文件名.</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/lihaozy/archive/2012/08/03/2621034.]]>
    </summary>
    
      <category term="Notepad++" scheme="http://moky.cc/tags/Notepad/"/>
    
      <category term="命令行参数" scheme="http://moky.cc/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/"/>
    
      <category term="杂类" scheme="http://moky.cc/categories/%E6%9D%82%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PyChecker使用指南]]></title>
    <link href="http://moky.cc/2015/05/08/PyChecker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://moky.cc/2015/05/08/PyChecker使用指南/</id>
    <published>2015-05-08T10:51:45.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/thoughtwise/article/details/5719455" title="http://blog.csdn.net/thoughtwise/article/details/5719455" target="_blank" rel="external">http://blog.csdn.net/thoughtwise/article/details/5719455</a></p>
</blockquote>
<h2 id="简介">简介</h2>
<p>PyChecker是一个对Python源代码进行语法检查的工具。<br>主页：<a href="http://pychecker.sourceforge.net" title="http://pychecker.sourceforge.net" target="_blank" rel="external">http://pychecker.sourceforge.net</a></p>
<p>PyChecker is a static analysis tool for finding bugs in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages, like C and C++. It is similar to lint.</p>
<p>目前最新版本是2008-08-18 更新的pychecker-0.8.18。</p>
<p><br></p>
<h2 id="安装">安装</h2>
<p>前提：本地安装好Python2.x， 推荐2.6版本，虽然2.7版本也发布了。3.0版差异太大，相当于全新版本，不保证兼容性，不推荐使用。<br>最好将IPython也一并安装了。</p>
<p>下载地址：<a href="http://sourceforge.net/projects/pychecker" title="http://sourceforge.net/projects/pychecker" target="_blank" rel="external">http://sourceforge.net/projects/pychecker</a></p>
<p>从网页上下载pychecker-0.8.18.tar.gz，解压。</p>
<p>然后在pychecker-0.8.18目录(其下有setup.py脚本)， 执行命令行<code>python setup.py install</code>执行安装。这也是在Windows下python软件的通用安装方式。</p>
<p><br></p>
<h2 id="使用">使用</h2>
<p>安装好后，试试在pychecker-0.8.18目录执行命令行<code>pychecker setup.py</code>，检查setup.py的语法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="constant">E</span><span class="symbol">:/pychecker-</span><span class="number">0</span>.<span class="number">8.18</span>&gt;pychecker setup.py</div><div class="line"></div><div class="line"><span class="constant">E</span><span class="symbol">:/pychecker-</span><span class="number">0</span>.<span class="number">8.18</span>&gt;<span class="constant">C</span><span class="symbol">:/Python26/python</span>.exe <span class="constant">C</span><span class="symbol">:/Python26/Lib/site-packages/pychecker/checker</span>.py se</div><div class="line">tup.py</div><div class="line"><span class="constant">Processing</span> <span class="class"><span class="keyword">module</span> <span class="title">setup</span> (<span class="title">setup</span>.<span class="title">py</span>)...</span></div><div class="line"></div><div class="line"><span class="constant">Warnings</span>...</div><div class="line"></div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/bdist_wininst</span>.<span class="symbol">py:</span><span class="number">271</span><span class="symbol">:</span> <span class="constant">Statement</span> appears to have no effect</div><div class="line"></div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/build_scripts</span>.<span class="symbol">py:</span><span class="number">80</span><span class="symbol">:</span> <span class="constant">No</span> <span class="class"><span class="keyword">class</span> <span class="title">attribute</span> (<span class="title">dry_run</span>) <span class="title">found</span></span></div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/build_scripts</span>.<span class="symbol">py:</span><span class="number">97</span><span class="symbol">:</span> <span class="constant">No</span> <span class="class"><span class="keyword">class</span> <span class="title">attribute</span> (<span class="title">dry_run</span>) <span class="title">found</span></span></div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/build_scripts</span>.<span class="symbol">py:</span><span class="number">120</span><span class="symbol">:</span> (file) shadows builtin</div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/build_scripts</span>.<span class="symbol">py:</span><span class="number">121</span><span class="symbol">:</span> <span class="constant">No</span> <span class="class"><span class="keyword">class</span> <span class="title">attribute</span> (<span class="title">dry_run</span>) <span class="title">found</span></span></div><div class="line"></div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/install_data</span>.<span class="symbol">py:</span><span class="number">62</span><span class="symbol">:</span> (dir) shadows builtin</div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/install_data</span>.<span class="symbol">py:</span><span class="number">64</span><span class="symbol">:</span> (dir) shadows builtin</div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/install_data</span>.<span class="symbol">py:</span><span class="number">66</span><span class="symbol">:</span> (dir) shadows builtin</div><div class="line"></div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/install_scripts</span>.<span class="symbol">py:</span><span class="number">52</span><span class="symbol">:</span> (file) shadows builtin</div><div class="line"><span class="constant">C</span><span class="symbol">:/Python26/lib/distutils/command/install_scripts</span>.<span class="symbol">py:</span><span class="number">53</span><span class="symbol">:</span> <span class="constant">No</span> <span class="class"><span class="keyword">class</span> <span class="title">attribute</span> (<span class="title">dry_run</span>) <span class="title">found</span></span></div><div class="line"></div><div class="line"><span class="number">19</span> errors suppressed, use -<span class="comment">#/--limit to increase the number of errors displayed</span></div></pre></td></tr></table></figure>


<p>这里pychecker 是个bat脚本，实际执行的是C:/Python26/python.exe C:/Python26/Lib/site-packages/pychecker/checker.py 。</p>
<p>这里检查结果将setup.py依赖的文件中语法错误或告警也检查出来了。</p>
<p>如果只想检查setup.py自身的语法，可以用<code>--only</code>参数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="constant">E</span><span class="symbol">:/pychecker-</span><span class="number">0</span>.<span class="number">8.18</span>&gt;pychecker --only setup.py</div><div class="line"></div><div class="line"><span class="constant">E</span><span class="symbol">:/pychecker-</span><span class="number">0</span>.<span class="number">8.18</span>&gt;<span class="constant">C</span><span class="symbol">:/Python26/python</span>.exe <span class="constant">C</span><span class="symbol">:/Python26/Lib/site-packages/pychecker/checker</span>.py --only setup.py</div><div class="line"><span class="constant">Processing</span> <span class="class"><span class="keyword">module</span> <span class="title">setup</span> (<span class="title">setup</span>.<span class="title">py</span>)...</span></div><div class="line"></div><div class="line"><span class="constant">Warnings</span>...</div><div class="line"></div><div class="line"><span class="constant">None</span></div></pre></td></tr></table></figure>

<p>更多的参数，可以使用<code>pychecker --help</code>查看</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/thoughtwise/article/details/5719455" ]]>
    </summary>
    
      <category term="PyChecker" scheme="http://moky.cc/tags/PyChecker/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[QT内置的ICON资源]]></title>
    <link href="http://moky.cc/2015/05/07/QT%E5%86%85%E7%BD%AE%E7%9A%84ICON%E8%B5%84%E6%BA%90/"/>
    <id>http://moky.cc/2015/05/07/QT内置的ICON资源/</id>
    <published>2015-05-07T08:57:53.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/fjb2080/article/details/7225692" title="http://blog.csdn.net/fjb2080/article/details/7225692" target="_blank" rel="external">http://blog.csdn.net/fjb2080/article/details/7225692</a></p>
</blockquote>
<p>QT内置的ICON资源保存在QStyle类里。</p>
<p>可以通过成员函数<br><code>QStyle::standardIcon</code><br>来获取。</p>
<p>保存的icon有：<br><code>enum QStyle::StandardPixmap</code> This enum describes the available standard pixmaps. A standard pixmap is a pixmap that can follow some existing GUI style or guideline.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Constant</th>
<th style="text-align:right">Value</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarMinButton</td>
<td style="text-align:right">1</td>
<td style="text-align:center">Minimize button on title bars (e.g., in QMdiSubWindow).</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarMenuButton</td>
<td style="text-align:right">0</td>
<td style="text-align:center">Menu button on a title bar.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarMaxButton</td>
<td style="text-align:right">2</td>
<td style="text-align:center">Maximize button on title bars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarCloseButton</td>
<td style="text-align:right">3</td>
<td style="text-align:center">Close button on title bars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarNormalButton</td>
<td style="text-align:right">4</td>
<td style="text-align:center">Normal (restore) button on title bars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarShadeButton</td>
<td style="text-align:right">5</td>
<td style="text-align:center">Shade button on title bars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarUnshadeButton</td>
<td style="text-align:right">6</td>
<td style="text-align:center">Unshade button on title bars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TitleBarContextHelpButton</td>
<td style="text-align:right">7</td>
<td style="text-align:center">The Context help button on title bars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MessageBoxInformation</td>
<td style="text-align:right">9</td>
<td style="text-align:center">The “information” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MessageBoxWarning</td>
<td style="text-align:right">10</td>
<td style="text-align:center">The “warning” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MessageBoxCritical</td>
<td style="text-align:right">11</td>
<td style="text-align:center">The “critical” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MessageBoxQuestion</td>
<td style="text-align:right">12</td>
<td style="text-align:center">The “question” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DesktopIcon</td>
<td style="text-align:right">13</td>
<td style="text-align:center">The “desktop” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_TrashIcon</td>
<td style="text-align:right">14</td>
<td style="text-align:center">The “trash” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ComputerIcon</td>
<td style="text-align:right">15</td>
<td style="text-align:center">The “My computer” icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DriveFDIcon</td>
<td style="text-align:right">16</td>
<td style="text-align:center">The floppy icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DriveHDIcon</td>
<td style="text-align:right">17</td>
<td style="text-align:center">The harddrive icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DriveCDIcon</td>
<td style="text-align:right">18</td>
<td style="text-align:center">The CD icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DriveDVDIcon</td>
<td style="text-align:right">19</td>
<td style="text-align:center">The DVD icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DriveNetIcon</td>
<td style="text-align:right">20</td>
<td style="text-align:center">The network icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DirHomeIcon</td>
<td style="text-align:right">55</td>
<td style="text-align:center">The home directory icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DirOpenIcon</td>
<td style="text-align:right">21</td>
<td style="text-align:center">The open directory icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DirClosedIcon</td>
<td style="text-align:right">22</td>
<td style="text-align:center">The closed directory icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DirIcon</td>
<td style="text-align:right">37</td>
<td style="text-align:center">The directory icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DirLinkIcon</td>
<td style="text-align:right">23</td>
<td style="text-align:center">The link to directory icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileIcon</td>
<td style="text-align:right">24</td>
<td style="text-align:center">The file icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileLinkIcon</td>
<td style="text-align:right">25</td>
<td style="text-align:center">The link to file icon.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogStart</td>
<td style="text-align:right">28</td>
<td style="text-align:center">The “start” icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogEnd</td>
<td style="text-align:right">29</td>
<td style="text-align:center">The “end” icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogToParent</td>
<td style="text-align:right">30</td>
<td style="text-align:center">The “parent directory” icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogNewFolder</td>
<td style="text-align:right">31</td>
<td style="text-align:center">The “create new folder” icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogDetailedView</td>
<td style="text-align:right">32</td>
<td style="text-align:center">The detailed view icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogInfoView</td>
<td style="text-align:right">33</td>
<td style="text-align:center">The file info icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogContentsView</td>
<td style="text-align:right">34</td>
<td style="text-align:center">The contents view icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogListView</td>
<td style="text-align:right">35</td>
<td style="text-align:center">The list view icon in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_FileDialogBack</td>
<td style="text-align:right">36</td>
<td style="text-align:center">The back arrow in a file dialog.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DockWidgetCloseButton</td>
<td style="text-align:right">8</td>
<td style="text-align:center">Close button on dock windows (see also QDockWidget).</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ToolBarHorizontalExtensionButton</td>
<td style="text-align:right">26</td>
<td style="text-align:center">Extension button for horizontal toolbars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ToolBarVerticalExtensionButton</td>
<td style="text-align:right">27</td>
<td style="text-align:center">Extension button for vertical toolbars.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogOkButton</td>
<td style="text-align:right">38</td>
<td style="text-align:center">Icon for a standard OK button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogCancelButton</td>
<td style="text-align:right">39</td>
<td style="text-align:center">Icon for a standard Cancel button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogHelpButton</td>
<td style="text-align:right">40</td>
<td style="text-align:center">Icon for a standard Help button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogOpenButton</td>
<td style="text-align:right">41</td>
<td style="text-align:center">Icon for a standard Open button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogSaveButton</td>
<td style="text-align:right">42</td>
<td style="text-align:center">Icon for a standard Save button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogCloseButton</td>
<td style="text-align:right">43</td>
<td style="text-align:center">Icon for a standard Close button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogApplyButton</td>
<td style="text-align:right">44</td>
<td style="text-align:center">Icon for a standard Apply button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogResetButton</td>
<td style="text-align:right">45</td>
<td style="text-align:center">Icon for a standard Reset button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogDiscardButton</td>
<td style="text-align:right">46</td>
<td style="text-align:center">Icon for a standard Discard button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogYesButton</td>
<td style="text-align:right">47</td>
<td style="text-align:center">Icon for a standard Yes button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_DialogNoButton</td>
<td style="text-align:right">48</td>
<td style="text-align:center">Icon for a standard No button in a QDialogButtonBox.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ArrowUp</td>
<td style="text-align:right">49</td>
<td style="text-align:center">Icon arrow pointing up.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ArrowDown</td>
<td style="text-align:right">50</td>
<td style="text-align:center">Icon arrow pointing down.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ArrowLeft</td>
<td style="text-align:right">51</td>
<td style="text-align:center">Icon arrow pointing left.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ArrowRight</td>
<td style="text-align:right">52</td>
<td style="text-align:center">Icon arrow pointing right.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ArrowBack</td>
<td style="text-align:right">53</td>
<td style="text-align:center">Equivalent to SP_ArrowLeft when the current layout direction isQt::LeftToRight, otherwise SP_ArrowRight.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_ArrowForward</td>
<td style="text-align:right">54</td>
<td style="text-align:center">Equivalent to SP_ArrowRight when the current layout direction isQt::LeftToRight, otherwise SP_ArrowLeft.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_CommandLink</td>
<td style="text-align:right">56</td>
<td style="text-align:center">Icon used to indicate a Vista style command link glyph.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_VistaShield</td>
<td style="text-align:right">57</td>
<td style="text-align:center">Icon used to indicate UAC prompts on Windows Vista. This will return a null pixmap or icon on all other platforms.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_BrowserReload</td>
<td style="text-align:right">58</td>
<td style="text-align:center">Icon indicating that the current page should be reloaded.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_BrowserStop</td>
<td style="text-align:right">59</td>
<td style="text-align:center">Icon indicating that the page loading should stop.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaPlay</td>
<td style="text-align:right">60</td>
<td style="text-align:center">Icon indicating that media should begin playback.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaStop</td>
<td style="text-align:right">61</td>
<td style="text-align:center">Icon indicating that media should stop playback.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaPause</td>
<td style="text-align:right">62</td>
<td style="text-align:center">Icon indicating that media should pause playback.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaSkipForward</td>
<td style="text-align:right">63</td>
<td style="text-align:center">Icon indicating that media should skip forward.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaSkipBackward</td>
<td style="text-align:right">64</td>
<td style="text-align:center">Icon indicating that media should skip backward.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaSeekForward</td>
<td style="text-align:right">65</td>
<td style="text-align:center">Icon indicating that media should seek forward.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaSeekBackward</td>
<td style="text-align:right">66</td>
<td style="text-align:center">Icon indicating that media should seek backward.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaVolume</td>
<td style="text-align:right">67</td>
<td style="text-align:center">Icon indicating a volume control.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_MediaVolumeMuted</td>
<td style="text-align:right">68</td>
<td style="text-align:center">Icon indicating a muted volume control.</td>
</tr>
<tr>
<td style="text-align:left">QStyle::SP_CustomBase</td>
<td style="text-align:right">0xf0000000</td>
<td style="text-align:center">Base value for custom standard pixmaps; custom values must be greater than this value.</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/fjb2080/article/details/7225692" titl]]>
    </summary>
    
      <category term="内置ICON" scheme="http://moky.cc/tags/%E5%86%85%E7%BD%AEICON/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[py2exe使用方法]]></title>
    <link href="http://moky.cc/2015/05/06/py2exe%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://moky.cc/2015/05/06/py2exe使用方法/</id>
    <published>2015-05-06T09:12:49.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html" title="http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html" target="_blank" rel="external">http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.html</a></p>
</blockquote>
<h2 id="简介">简介</h2>
<p>py2exe是一个将python脚本转换成windows上的可独立执行的可执行程序(*.exe)的工具，这样，你就可以不用装python而在windows系统上运行这个可执行程序。</p>
<p>py2exe已经被用于创建wxPython,Tkinter,Pmw,PyGTK,pygame,win32com client和server,和其它的独立程序。py2exe是发布在开源许可证下的。</p>
<p><br></p>
<h2 id="安装py2exe">安装py2exe</h2>
<p>从<a href="http://prdownloads.sourceforge.net/py2exe" title="http://prdownloads.sourceforge.net/py2exe" target="_blank" rel="external">http://prdownloads.sourceforge.net/py2exe</a>下载并运行与你所安装的Python对应的py2exe版本的installer，这将安装py2exe和相应的例子；这些例子被安装在lib\site-packages\py2exe\samples目录下。</p>
<p><br></p>
<h2 id="py2exe的用法">py2exe的用法</h2>
<p>如果你有一个名为helloworld.py的python脚本，你想把它转换为运行在windows上的可执行程序，并运行在没有安装python的windows系统上，那么首先你应写一个用于发布程序的设置脚本例如mysetup.py，在其中的setup函数前插入语句import py2exe 。<br>mysetup.py示例如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysetup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line"></div><div class="line">setup(console=[<span class="string">"helloworld.py"</span>])</div></pre></td></tr></table></figure>

<p>然后按下面的方法运行mysetup.py:<br><code>python mysetup.py py2exe</code><br>上面的命令执行后将产生一个名为dist的子目录，其中包含了helloworld.exe,python24.dll,library.zip这些文件。<br>如果你的helloworld.py脚本中用了已编译的C扩展模块，那么这些模块也会被拷贝在个子目录中，同样，所有的dll文件在运行时都是需要的，除了系统的dll文件。<br>dist子目录中的文件包含了你的程序所必须的东西，你应将这个子目录中的所有内容一起发布。</p>
<p>默认情况下，py2exe在目录dist下创建以下这些必须的文件：</p>
<ol>
<li>一个或多个exe文件。</li>
<li>python##.dll。 </li>
<li>几个.pyd文件，它们是已编译的扩展名，它们是exe文件所需要的；加上其它的.dll文件，这些.dll是.pyd所需要的。</li>
<li>一个library.zip文件，它包含了已编译的纯的python模块如.pyc或.pyo<br>上面的mysetup.py创建了一个控制台的helloword.exe程序，如果你要创建一个图形用户界的程序，那么你只需要将mysetup.py中的console=[“helloworld.py”]替换为windows=[“myscript.py”]既可。</li>
</ol>
<p>py2exe一次能够创建多个exe文件，你需要将这些脚本文件的列表传递给console或windows的关键字参数。如果你有几个相关联的脚本，那么这是很有用的。<br>运行下面个命令，将显示py2exe命令的所有命令行标记。<br><code>python mysetup.py py2exe --help</code></p>
<p><br></p>
<h2 id="指定额外的文件">指定额外的文件</h2>
<p>一些应用程序在运行时需要额外的文件，诸如配置文件、字体、位图。<br>如果在安装脚本中用data_files可选项指定了那些额外的文件，那么py2exe能将这些文件拷贝到dist子目录中。data_files应包含一个元组(target-dir, files)列表，其中的files是这些额外的文件的列表。<br>示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysetup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line"></div><div class="line">setup(console=[<span class="string">"helloworld.py"</span>],</div><div class="line">      data_files=[(<span class="string">"bitmaps"</span>,</div><div class="line">                   [<span class="string">"bm/large.gif"</span>, <span class="string">"bm/small.gif"</span>]),</div><div class="line">                  (<span class="string">"fonts"</span>,</div><div class="line">                   glob.glob(<span class="string">"fonts\\*.fnt"</span>))],</div><div class="line">)</div></pre></td></tr></table></figure>

<p>说明：data_files选项将创建一个子目录dist\bitmaps，其中包含两个.gif文件；一个子目录dist\fonts，其中包含了所有的.fnt文件。</p>
<p><br></p>
<h2 id="Windows_NT_services">Windows NT services</h2>
<p>你可以通过传递一个service关键字参数给setup函数来建造Windows NT services<br>,这个service参数的值必须是一个Python模块名(包含一service类)的列表。<br>示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysetup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line"></div><div class="line">setup(service=[<span class="string">"MyService"</span>])</div></pre></td></tr></table></figure>

<p>所建造的可执行的service是可以通过在其后跟一定的命令行参数标记来自行安装和卸载的。你可以通过在这个可执行的service(exe)后跟一-help参数来得到更多的帮助。</p>
<p><br></p>
<h2 id="COM_servers">COM servers</h2>
<p>你可以通过传递一个com_server 关键字参数给setup函数来建造Windows NT services<br>,这个service参数的值必须是一个Python模块名(包含一个或多个COM server 类)的列表。<br>示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mysetup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line"></div><div class="line">setup(com_server=[<span class="string">"win32com.server.interp"</span>])</div></pre></td></tr></table></figure>

<p>默认情况下，DLL和EXE servers被建造，你不需要它们的话你可以简单的删除它们。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/jans2002/archive/2006/09/30/519393.]]>
    </summary>
    
      <category term="py2exe" scheme="http://moky.cc/tags/py2exe/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[py2exe error: MSVCP90.dll: No such file or directory]]></title>
    <link href="http://moky.cc/2015/05/05/py2exe-error-MSVCP90-dll-No-such-file-or-directory/"/>
    <id>http://moky.cc/2015/05/05/py2exe-error-MSVCP90-dll-No-such-file-or-directory/</id>
    <published>2015-05-05T09:22:08.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/sunny5211/article/details/6431864" title="http://blog.csdn.net/sunny5211/article/details/6431864" target="_blank" rel="external">http://blog.csdn.net/sunny5211/article/details/6431864</a></p>
</blockquote>
<p>当用py2exe 2.6编译python程序时出现这样的错误，从google上搜到了解决方法，英文网站就不翻译了，直接贴出解决方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#setup.py</span></div><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</div><div class="line"><span class="keyword">import</span> py2exe</div><div class="line">setup(windows=[<span class="string">"frame.py"</span>],options = { <span class="string">"py2exe"</span>:{<span class="string">"dll_excludes"</span>:[<span class="string">"MSVCP90.dll"</span>]}})</div></pre></td></tr></table></figure>

<p>保存为setup.py</p>
<p>然后运行：<code>python setup.py py2exe</code> 就可以编译成功了</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/sunny5211/article/details/6431864" ti]]>
    </summary>
    
      <category term="py2exe" scheme="http://moky.cc/tags/py2exe/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt剪贴板操作]]></title>
    <link href="http://moky.cc/2015/05/04/Qt%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%93%8D%E4%BD%9C/"/>
    <id>http://moky.cc/2015/05/04/Qt剪贴板操作/</id>
    <published>2015-05-04T09:32:37.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://devbean.blog.51cto.com/448512/292229" title="http://devbean.blog.51cto.com/448512/292229" target="_blank" rel="external">http://devbean.blog.51cto.com/448512/292229</a></p>
</blockquote>
<p>剪贴板的操作经常和前面所说的拖放技术在一起使用，因此我们现在先来说说剪贴板的相关操作。</p>
<p>大家对剪贴板都很熟悉。我们可以简单的把它理解成一个数据的存储池，可以把外面的数据放置进去，也可以把里面的数据取出来。剪贴板是由操作系统维护的，所以这提供了跨应用程序数据交互的一种方式。Qt 已经为我们封装好很多关于剪贴板的操作，因此我们可以在自己的应用中很容易的实现。下面还是从代码开始:<br><strong>clipboarddemo.h</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef CLIPBOARDDEMO_H  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> CLIPBOARDDEMO_H  </span></div><div class="line"> </div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QtGui/QWidget&gt;  </span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> ClipboardDemo : <span class="keyword">public</span> QWidget  </div><div class="line">{  </div><div class="line">    Q_OBJECT  </div><div class="line"> </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    ClipboardDemo(QWidget *parent = <span class="number">0</span>);  </div><div class="line"> </div><div class="line"><span class="keyword">private</span> slots:  </div><div class="line">    <span class="keyword">void</span> setClipboard();  </div><div class="line">    <span class="keyword">void</span> getClipboard();  </div><div class="line">};  </div><div class="line"> </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">// CLIPBOARDDEMO_H</span></span></div></pre></td></tr></table></figure>

<p><strong>clipboarddemo.cpp</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QtGui&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "clipboarddemo.h"  </span></div><div class="line"> </div><div class="line">ClipboardDemo::ClipboardDemo(QWidget *parent)  </div><div class="line">    : QWidget(parent)  </div><div class="line">{  </div><div class="line">    QVBoxLayout *mainLayout = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);  </div><div class="line">    QHBoxLayout *northLayout = <span class="keyword">new</span> QHBoxLayout;  </div><div class="line">    QHBoxLayout *southLayout = <span class="keyword">new</span> QHBoxLayout;  </div><div class="line"> </div><div class="line">    QTextEdit *editor = <span class="keyword">new</span> QTextEdit;  </div><div class="line">    QLabel *label = <span class="keyword">new</span> QLabel;  </div><div class="line">    label-&gt;setText(<span class="string">"Text Input: "</span>);  </div><div class="line">    label-&gt;setBuddy(editor);  </div><div class="line">    QPushButton *copyButton = <span class="keyword">new</span> QPushButton;  </div><div class="line">    copyButton-&gt;setText(<span class="string">"Set Clipboard"</span>);  </div><div class="line">    QPushButton *pasteButton = <span class="keyword">new</span> QPushButton;  </div><div class="line">    pasteButton-&gt;setText(<span class="string">"Get Clipboard"</span>);  </div><div class="line"> </div><div class="line">    northLayout-&gt;addWidget(label);  </div><div class="line">    northLayout-&gt;addWidget(editor);  </div><div class="line">    southLayout-&gt;addWidget(copyButton);  </div><div class="line">    southLayout-&gt;addWidget(pasteButton);  </div><div class="line">    mainLayout-&gt;addLayout(northLayout);  </div><div class="line">    mainLayout-&gt;addLayout(southLayout);  </div><div class="line"> </div><div class="line">    connect(copyButton, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(setClipboard()));  </div><div class="line">    connect(pasteButton, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(getClipboard()));  </div><div class="line">}  </div><div class="line"> </div><div class="line"><span class="keyword">void</span> ClipboardDemo::setClipboard()  </div><div class="line">{  </div><div class="line">    QClipboard *board = QApplication::clipboard();  </div><div class="line">    board-&gt;setText(<span class="string">"Text from Qt Application"</span>);  </div><div class="line">}  </div><div class="line"> </div><div class="line"><span class="keyword">void</span> ClipboardDemo::getClipboard()  </div><div class="line">{  </div><div class="line">    QClipboard *board = QApplication::clipboard();  </div><div class="line">    QString str = board-&gt;text();  </div><div class="line">    QMessageBox::information(NULL, <span class="string">"From clipboard"</span>, str);  </div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>main.cpp</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "clipboarddemo.h"  </span></div><div class="line"> </div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QtGui&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QApplication&gt;  </span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])  </div><div class="line">{  </div><div class="line">    QApplication a(argc, argv);  </div><div class="line">    ClipboardDemo w;  </div><div class="line">    w.show();  </div><div class="line">    <span class="keyword">return</span> a.exec();  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>main() 函数很简单，就是把我们的 ClipboardDemo 类显示了出来。我们重点来看 ClipboardDemo 中的代码。</p>
<p>构造函数同样没什么复杂的内容，我们把一个label。一个 textedit 和两个 button摆放到窗口中。这些代码已经能够很轻易的写出来了；然后进行了信号槽的连接。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ClipboardDemo::setClipboard()  </div><div class="line">{  </div><div class="line">    QClipboard *board = QApplication::clipboard();  </div><div class="line">    board-&gt;setText(<span class="string">"Text from Qt Application"</span>);  </div><div class="line">}  </div><div class="line"> </div><div class="line"><span class="keyword">void</span> ClipboardDemo::getClipboard()  </div><div class="line">{  </div><div class="line">    QClipboard *board = QApplication::clipboard();  </div><div class="line">    QString str = board-&gt;text();  </div><div class="line">    QMessageBox::information(NULL, <span class="string">"From clipboard"</span>, str);  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>在 slot 函数中，我们使用 QApplication::clipboard() 函数访问到系统剪贴板。这个函数的返回值是 QClipboard 的指针。我们可以从这个类的 API 中看到，通过 setText()，setImage() 或者 setPixmap() 函数可以将数据放置到剪贴板内，也就是通常所说的剪贴或者复制的操作；使用 text()，image() 或者 pixmap() 函数则可以从剪贴板获得数据，也就是粘贴。</p>
<p>另外值得说的是，通过上面的例子可以看出，QTextEdit 默认就是支持 Ctrl+C, Ctrl+V 等快捷键操作的。不仅如此，很多 Qt 的组件都提供了很方便的操作，因此我们需要从文档中获取具体的信息，从而避免自己重新去发明轮子。</p>
<p>QClipboard 提供的数据类型很少，如果需要，我们可以继承 QMimeData 类，通过调用 setMimeData() 函数让剪贴板能够支持我们自己的数据类型。</p>
<p>在 X11 系统中，鼠标中键(一般就是滚轮)可以支持剪贴操作的。为了实现这一功能，我们需要向 QClipboard::text() 函数传递 QClipboard::Selection 参数。例如，我们在鼠标按键释放的事件中进行如下处理：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MyTextEditor::mouseReleaseEvent(QMouseEvent *event)  </div><div class="line">{  </div><div class="line">    QClipboard *clipboard = QApplication::clipboard();  </div><div class="line">    <span class="keyword">if</span> (event-&gt;button() == Qt::MidButton  </div><div class="line">            && clipboard-&gt;supportsSelection()) {  </div><div class="line">        QString text = clipboard-&gt;text(QClipboard::Selection);  </div><div class="line">        pasteText(text);  </div><div class="line">    }  </div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里的 supportsSelection() 在 X11 平台返回 true，其余平台都是返回 false 的。</p>
<p>另外，QClipboard 提供了 dataChanged() 信号，以便监听剪贴板数据变化。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://devbean.blog.51cto.com/448512/292229" title="http:/]]>
    </summary>
    
      <category term="剪贴板" scheme="http://moky.cc/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    
      <category term="复制到剪贴板" scheme="http://moky.cc/tags/%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python分割路径与文件名分隔符]]></title>
    <link href="http://moky.cc/2015/04/27/Python%E5%88%86%E5%89%B2%E8%B7%AF%E5%BE%84%E4%B8%8E%E6%96%87%E4%BB%B6%E5%90%8D%E5%88%86%E9%9A%94%E7%AC%A6/"/>
    <id>http://moky.cc/2015/04/27/Python分割路径与文件名分隔符/</id>
    <published>2015-04-27T09:39:38.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os.path</div><div class="line"></div><div class="line">spath=<span class="string">"D:/360Downloads/testFile1/folder2/testFile1.txt"</span></div><div class="line"><span class="comment">#case 1:</span></div><div class="line">p,f=os.path.split(spath);</div><div class="line">print(<span class="string">"dir is:"</span> + p)</div><div class="line">print(<span class="string">"file is:"</span> + f)</div><div class="line"></div><div class="line"><span class="comment">#case 2:</span></div><div class="line">drv,left=os.path.splitdrive(spath);</div><div class="line">print(<span class="string">"drive is:"</span> + drv)</div><div class="line">print(<span class="string">"left is:"</span> + left)</div><div class="line"></div><div class="line"><span class="comment">#case 3:</span></div><div class="line">f,ext = os.path.splitext(spath);</div><div class="line">print(<span class="string">"f is:"</span> + f)</div><div class="line">print(<span class="string">"ext is:"</span> + ext)</div></pre></td></tr></table></figure>

<p>Python中os.path常用模块：<br><code>os.path.sep</code> 路径分隔符 linux下就用这个了’/’<br><code>os.path.altsep</code> 根目录<br><code>os.path.curdir</code> 当前目录<br><code>os.path.pardir</code> 父目录<br><code>os.path.abspath(path)</code> 绝对路径<br><code>os.path.join()</code> 常用来链接路径<br><code>os.path.split(path)</code> 把path分为目录和文件两个部分，以列表返回</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">[GCC 4.4.5] on linux2</span></span></div><div class="line">Type "help", "copyright", "credits" or "license" for more information.</div><div class="line">&gt;&gt;&gt; import os</div><div class="line"><span class="input"><span class="prompt">&gt;&gt;&gt;</span> help(<span class="string">'os.path.sep'</span>)</span></div><div class="line"><span class="input"><span class="prompt"></span></span></div><div class="line">&gt;&gt;&gt; print os.path.sep</div><div class="line"><span class="input"><span class="prompt">/</span></span></div><div class="line">&gt;&gt;&gt; print os.path.altsep</div><div class="line"><span class="input"><span class="prompt">None</span></span></div><div class="line">&gt;&gt;&gt; print os.path.curdir</div><div class="line"><span class="input"><span class="prompt">.</span></span></div><div class="line">&gt;&gt;&gt; print os.path.abspath(<span class="string">'/root'</span>)</div><div class="line"><span class="input"><span class="prompt">/root</span></span></div><div class="line">&gt;&gt;&gt; print os.path.abspath(<span class="string">'/root/pp'</span>)</div><div class="line"><span class="input"><span class="prompt">/root/pp</span></span></div><div class="line">&gt;&gt;&gt; print os.path.abspath(<span class="string">'/root/pp/f.c'</span>)</div><div class="line"><span class="input"><span class="prompt">/root/pp/f.c</span></span></div><div class="line">&gt;&gt;&gt; print os.path.split(<span class="string">'/root/pp/f.c'</span>)</div><div class="line">(<span class="string">'/root/pp'</span>, <span class="string">'f.c'</span>)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="]]>
    </summary>
    
      <category term="文件名分隔符" scheme="http://moky.cc/tags/%E6%96%87%E4%BB%B6%E5%90%8D%E5%88%86%E9%9A%94%E7%AC%A6/"/>
    
      <category term="分割路径" scheme="http://moky.cc/tags/%E5%88%86%E5%89%B2%E8%B7%AF%E5%BE%84/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS禁止选择文本功能（兼容IE,火狐等浏览器）]]></title>
    <link href="http://moky.cc/2015/04/25/CSS%E7%A6%81%E6%AD%A2%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC%E5%8A%9F%E8%83%BD%EF%BC%88%E5%85%BC%E5%AE%B9IE-%E7%81%AB%E7%8B%90%E7%AD%89%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%89/"/>
    <id>http://moky.cc/2015/04/25/CSS禁止选择文本功能（兼容IE-火狐等浏览器）/</id>
    <published>2015-04-25T02:43:06.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.javascript100.com/?p=455" title="http://www.javascript100.com/?p=455" target="_blank" rel="external">http://www.javascript100.com/?p=455</a></p>
</blockquote>
<p>有时候，我们为了用户体验，需要禁用选择文本功能。<br>这需要用到一个CSS属性：user-select，user-select的文档点这里</p>
<p><em>user-select</em> 有两个值：<br><code>none</code> 用户不能选择文本<br><code>text</code> 用户可以选择文本</p>
<p>需要注意的是：user-select并不是一个W3C的CSS标准属性，浏览器支持的不完整，需要对每种浏览器进行调整</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">body</span><span class="rules">{</span></div><div class="line">   <span class="rule"><span class="attribute">-moz-user-select</span>:<span class="value"> none</span></span>; <span class="comment">/*火狐*/</span></div><div class="line">   <span class="rule"><span class="attribute">-webkit-user-select</span>:<span class="value"> none</span></span>;  <span class="comment">/*webkit浏览器*/</span></div><div class="line">   <span class="rule"><span class="attribute">-ms-user-select</span>:<span class="value"> none</span></span>;   <span class="comment">/*IE10*/</span></div><div class="line">   <span class="rule"><span class="attribute">-khtml-user-select</span>:<span class="value"> none</span></span>; <span class="comment">/*早期浏览器*/</span></div><div class="line">   <span class="rule"><span class="attribute">user-select</span>:<span class="value"> none</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>IE6-9还没发现相关的CSS属性，只能通过JS来实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//IE6-9</span></div><div class="line"><span class="built_in">document</span>.body.onselectstart = <span class="built_in">document</span>.body.ondrag = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这样我们就可以结合CSS和JS的方法来禁用浏览器的文本选择功能了</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.javascript100.com/?p=455" title="http://www.jav]]>
    </summary>
    
      <category term="禁止选择文本" scheme="http://moky.cc/tags/%E7%A6%81%E6%AD%A2%E9%80%89%E6%8B%A9%E6%96%87%E6%9C%AC/"/>
    
      <category term="CSS" scheme="http://moky.cc/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python的lambda匿名函数]]></title>
    <link href="http://moky.cc/2015/04/20/Python%E7%9A%84lambda%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://moky.cc/2015/04/20/Python的lambda匿名函数/</id>
    <published>2015-04-20T04:26:59.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html" title="http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html" target="_blank" rel="external">http://www.cnblogs.com/coderzh/archive/2010/04/30/python-cookbook-lambda.html</a></p>
</blockquote>
<h2 id="介绍">介绍</h2>
<p>lambda函数也叫匿名函数，即，函数没有具体的名称。先来看一个最简单例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">return</span> x**<span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> f(<span class="number">4</span>)</div></pre></td></tr></table></figure>

<p>Python中使用lambda的话，写成这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">g = <span class="keyword">lambda</span> x : x**<span class="number">2</span></div><div class="line"><span class="keyword">print</span> g(<span class="number">4</span>)</div></pre></td></tr></table></figure>

<p>lambda表达式在很多编程语言都有对应的实现。比如C#：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> g = x =&gt; x**<span class="number">2</span></div><div class="line">Console.WriteLine(g(<span class="number">4</span>))</div></pre></td></tr></table></figure>

<p>那么，lambda表达式有什么用处呢？很多人提出了质疑，lambda和普通的函数相比，就是省去了函数名称而已，同时这样的匿名函数，又不能共享在别的地方调用。其实说的没错，lambda在Python这种动态的语言中确实没有起到什么惊天动地的作用，因为有很多别的方法能够代替lambda。同时，使用lambda的写法有时显得并没有那么pythonic。甚至有人提出之后的Python版本要取消lambda。<br>回过头来想想，Python中的lambda真的没有用武之地吗？其实不是的，至少我能想到的点，主要有：</p>
<ol>
<li>使用Python写一些执行脚本时，使用lambda可以省去定义函数的过程，让代码更加精简。</li>
<li>对于一些抽象的，不会别的地方再复用的函数，有时候给函数起个名字也是个难题，使用lambda不需要考虑命名的问题。</li>
<li>使用lambda在某些时候让代码更容易理解。</li>
</ol>
<p><br></p>
<h2 id="lambda基础">lambda基础</h2>
<p>lambda语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。lambda语句构建的其实是一个函数对象，见证一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">g = <span class="keyword">lambda</span> x : x**<span class="number">2</span></div><div class="line"><span class="keyword">print</span> g</div><div class="line"></div><div class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x00AFAAF0</span>&gt;</div></pre></td></tr></table></figure>

<p>C#3.0开始，也有了lambda表达式，省去了使用delegate的麻烦写法。C#中的lambda表达式关键字是=&gt;，看下面的一个例子：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="keyword">int</span>[] {<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>};</div><div class="line"><span class="keyword">var</span> result = array.Where(n =&gt; n &gt; <span class="number">3</span>); <span class="comment">// [5, 6, 9]</span></div></pre></td></tr></table></figure>

<p>C#使用了扩展方法，才使得数组对象拥有了像Where,Sum之类方便的方法。Python中，也有几个定义好的全局函数方便使用的，他们就是filter, map, reduce。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">&gt;&gt;&gt;</span> foo = [<span class="number">2</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">27</span>]</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="input"><span class="prompt">&gt;&gt;&gt;</span> print filter(lambda <span class="symbol">x:</span> x % <span class="number">3</span> == <span class="number">0</span>, foo)</span></div><div class="line">[<span class="number">18</span>, <span class="number">9</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">27</span>]</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="input"><span class="prompt">&gt;&gt;&gt;</span> print map(lambda <span class="symbol">x:</span> x * <span class="number">2</span> + <span class="number">10</span>, foo)</span></div><div class="line">[<span class="number">14</span>, <span class="number">46</span>, <span class="number">28</span>, <span class="number">54</span>, <span class="number">44</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">64</span>]</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="input"><span class="prompt">&gt;&gt;&gt;</span> print reduce(lambda x, <span class="symbol">y:</span> x + y, foo)</span></div><div class="line"><span class="number">139</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="非lambda不可？">非lambda不可？</h2>
<p>上面例子中的map的作用，和C#的Where扩展方法一样，非常简单方便。但是，Python是否非要使用lambda才能做到这样的简洁程度呢？在对象遍历处理方面，其实Python的for..in..if语法已经很强大，并且在易读上胜过了lambda。比如上面map的例子，可以写成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> [x * <span class="number">2</span> + <span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> foo]</div></pre></td></tr></table></figure>

<p>非常的简洁，易懂。filter的例子可以写成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> [x <span class="keyword">for</span> x <span class="keyword">in</span> foo <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</div></pre></td></tr></table></figure>

<p>同样也是比lambda的方式更容易理解。<br>所以，什么时候使用lambda，什么时候不用，需要具体情况具体分析，只要表达的意图清晰就好。一般情况下，如果for..in..if能做的，我都不会选择lambda。</p>
<p><br></p>
<h2 id="lambda_broken?">lambda broken?</h2>
<p>在数学教学中，经常会使用到lambda，比如有一位老兄就遇到这样一个问题。他想创建一个函数数组<code>fs=[f0,...,f9] where fi(n)=i+n</code>，于是乎，就定义了这么一个lambda函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs = [(<span class="keyword">lambda</span> n: i + n) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</div></pre></td></tr></table></figure>

<p>但是，奇怪的是，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fs[<span class="link_label">3</span>](<span class="link_url">4</span>)</div><div class="line">13</div><div class="line">&gt;&gt;&gt; fs[<span class="link_label">4</span>](<span class="link_url">4</span>)</div><div class="line">13</div><div class="line">&gt;&gt;&gt; fs[<span class="link_label">5</span>](<span class="link_url">4</span>)</div><div class="line">13</div></pre></td></tr></table></figure>

<p>结果并没有达到这位老兄的预期，预期的结果应该是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fs[<span class="link_label">3</span>](<span class="link_url">4</span>)</div><div class="line">7</div><div class="line">&gt;&gt;&gt; fs[<span class="link_label">4</span>](<span class="link_url">4</span>)</div><div class="line">8</div><div class="line">&gt;&gt;&gt; fs[<span class="link_label">5</span>](<span class="link_url">4</span>)</div><div class="line">9</div></pre></td></tr></table></figure>

<p>问题其实出在变量i上。上面的代码换个简单的不使用lambda的缩减版本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fs</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n + i</div><div class="line"><span class="keyword">print</span> fs(<span class="number">1</span>) <span class="comment"># 2</span></div><div class="line"></div><div class="line">i = <span class="number">2</span></div><div class="line"><span class="keyword">print</span> fs(<span class="number">1</span>) <span class="comment"># 3</span></div></pre></td></tr></table></figure>

<p>可见，上面没有达到预期的原因是lambda中的i使用的是匿名函数外的全局变量。修改一下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fs = [(<span class="keyword">lambda</span> n, i=i : i + n) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>fs[<span class="number">3</span>](<span class="number">4</span>)</div><div class="line"><span class="number">7</span></div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>fs[<span class="number">4</span>](<span class="number">4</span>)</div><div class="line"><span class="number">8</span></div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>fs[<span class="number">5</span>](<span class="number">4</span>)</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/coderzh/archive/2010/04/30/python-c]]>
    </summary>
    
      <category term="lambda" scheme="http://moky.cc/tags/lambda/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python单例模式]]></title>
    <link href="http://moky.cc/2015/04/19/Python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://moky.cc/2015/04/19/Python单例模式/</id>
    <published>2015-04-19T08:19:57.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html" title="http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html" target="_blank" rel="external">http://www.cnblogs.com/qq78292959/archive/2013/05/24/3097425.html</a></p>
</blockquote>
<p><code>单例模式</code> 保证一个类仅有一个实例，并提供一个访问他的全局访问点。</p>
<p>实现某个类只有一个实例的途径：</p>
<ol>
<li>让一个全局变量使得一个对象被访问，但是他不能防止外部实例化多个对象。</li>
<li>让类自身保存他的唯一实例，这个类可以保证没有其他实例可以被创建。<br><code>多线程时的单例模式</code> 加锁-双重锁定<br><code>饿汉式单例类</code> 在类被加载时就将自己实例化（静态初始化）。其优点是躲避了多线程访问的安全性问题，缺点是提前占用系统资源。<br><code>懒汉式单例类</code> 在第一次被引用时，才将自己实例化。避免开始时占用系统资源，但是有多线程访问安全性问题。</li>
</ol>
<p><strong>实例</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#encoding=utf-8</span></div><div class="line"><span class="comment">#单例模式</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PrintInfo</span><span class="params">(info)</span>:</span></div><div class="line"><span class="comment">#    print unicode(info,'utf-8').decode('gbk')</span></div><div class="line">    <span class="keyword">print</span> info.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'utf-8'</span>)  </div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="comment">#单例类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">()</span>:</span></div><div class="line">    instance=<span class="keyword">None</span></div><div class="line">    mutex=threading.Lock()</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="decorator">@staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetInstance</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">if</span>(Singleton.instance==<span class="keyword">None</span>):</div><div class="line">            Singleton.mutex.acquire()</div><div class="line">            <span class="keyword">if</span>(Singleton.instance==<span class="keyword">None</span>):</div><div class="line">                PrintInfo(<span class="string">'初始化实例'</span>)</div><div class="line">                Singleton.instance=Singleton()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                PrintInfo(<span class="string">'单例已经实例化'</span>)</div><div class="line">            Singleton.mutex.release()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            PrintInfo(<span class="string">'单例已经实例化'</span>)</div><div class="line">           </div><div class="line">        <span class="keyword">return</span> Singleton.instance</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">clientUI</span><span class="params">()</span>:</span></div><div class="line">    Singleton.GetInstance()</div><div class="line">    Singleton.GetInstance()</div><div class="line">    Singleton.GetInstance()</div><div class="line">   </div><div class="line">    <span class="keyword">return</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">    clientUI();</div></pre></td></tr></table></figure>

<p><strong>结果</strong>：<br>初始化实例 单例已经实例化 单例已经实例化<br>追加解释<code>@staticmethod</code>在 Python中提到 classmethod 就要提到 staticmethod，不是因为二者有什么关系，而是为了让用户区分以便更清楚地写代码。在C++中，我们了解直接通过类名访问的函数称为类的静态函数，即static修饰的函数，可见C++中classmethod和staticmethod是一个概念。 那么python中二者有什么区别呢？先来看下二者如何在python代码中声明</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></div><div class="line"> ...</div><div class="line"> </div><div class="line">  <span class="decorator">@classmethod  # classmethod的修饰符</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">class_method</span><span class="params">(cls, arg1, arg2, ...)</span>:</span></div><div class="line">   ...</div><div class="line">  <span class="decorator">@staticmethod  # staticmethod的修饰符</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">static_method</span><span class="params">(arg1, arg2, ...)</span>:</span></div><div class="line">   ...</div></pre></td></tr></table></figure>

<p>对于classmethod的参数，需要隐式地传递类名，而staticmethod参数中则不需要传递类名，其实这就是二者最大的区别。<br>二者都可以通过类名或者类实例对象来调用，因为强调的是classmethod和staticmethod，所以在写代码的时候最好使用类名，良好的编程习惯吧。<br>对于staticmethod就是为了要在类中定义而设置的，一般来说很少这样使用，可以使用模块级(module-level)的函数来替代它。既然要把它定义在类中，想必有作者的考虑。<br>对于classmethod，可以通过子类来进行重定义。<br>提到类级别的函数，也顺带提及类级别的变量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></div><div class="line"> </div><div class="line"> i = <span class="number">123</span> <span class="comment"># class-level variable</span></div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">  self.i = <span class="number">456</span> <span class="comment"># object-level variable</span></div><div class="line">  ...</div></pre></td></tr></table></figure>

<p>为了清晰地区分上面两个i，最好的办法就是考虑到python中的一切都是object，所以i=123属于class object的，i=456属于class instance object</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/qq78292959/archive/2013/05/24/30974]]>
    </summary>
    
      <category term="单例模式" scheme="http://moky.cc/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python使用UUID库生成唯一ID]]></title>
    <link href="http://moky.cc/2015/04/01/Python%E4%BD%BF%E7%94%A8UUID%E5%BA%93%E7%94%9F%E6%88%90%E5%94%AF%E4%B8%80ID/"/>
    <id>http://moky.cc/2015/04/01/Python使用UUID库生成唯一ID/</id>
    <published>2015-04-01T08:12:28.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html" title="http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html" target="_blank" rel="external">http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.html</a><br><a href="http://docs.python.org/library/uuid.html" title="http://docs.python.org/library/uuid.html" target="_blank" rel="external">http://docs.python.org/library/uuid.html</a><br><a href="http://www.ietf.org/rfc/rfc4122.txt" title="http://www.ietf.org/rfc/rfc4122.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc4122.txt</a></p>
</blockquote>
<p>概述：</p>
<p>UUID是128位的全局唯一标识符，通常由32字节的字符串表示。<br>它可以保证时间和空间的唯一性，也称为GUID，全称为：<br><code>UUID</code> —— Universally Unique IDentifier      Python 中叫 UUID<br><code>GUID</code> —— Globally Unique IDentifier         C#  中叫 GUID</p>
<p>它通过MAC地址、时间戳、命名空间、随机数、伪随机数来保证生成ID的唯一性。<br>UUID主要有五个算法，也就是五种方法来实现：<br>1、<code>uuid1()</code> 基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</p>
<p>2、<code>uuid2()</code> 基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</p>
<p>3、<code>uuid3()</code> 基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。    </p>
<p>4、<code>uuid4()</code> 基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</p>
<p>5、<code>uuid5()</code> 基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</p>
<p>使用方面：<br>首先，<code>Python</code>中没有基于<code>DCE</code>的，所以<code>uuid2</code>可以忽略；<br>其次，<code>uuid4</code>存在概率性重复，由无映射性，最好不用；<br>再次，若在<code>Global</code>的分布式计算环境下，最好用<code>uuid1</code>；<br>最后，若有名字的唯一性要求，最好用<code>uuid3</code>或<code>uuid5</code>。</p>
<p>编码方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> uuid</div><div class="line"></div><div class="line">name = <span class="string">"test_name"</span></div><div class="line">namespace = <span class="string">"test_namespace"</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> uuid.uuid1()  <span class="comment"># 带参的方法参见Python Doc</span></div><div class="line"><span class="keyword">print</span> uuid.uuid3(namespace, name)</div><div class="line"><span class="keyword">print</span> uuid.uuid4()</div><div class="line"><span class="keyword">print</span> uuid.uuid5(namespace, name)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/dkblog/archive/2011/10/10/2205200.h]]>
    </summary>
    
      <category term="uuid" scheme="http://moky.cc/tags/uuid/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Python文件操作]]></title>
    <link href="http://moky.cc/2015/03/20/%E5%85%B3%E4%BA%8EPython%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://moky.cc/2015/03/20/关于Python文件操作/</id>
    <published>2015-03-20T09:53:30.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html" title="http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html" target="_blank" rel="external">http://www.cnblogs.com/rollenholt/archive/2012/04/23/2466179.html</a></p>
</blockquote>
<p>总是记不住API。昨晚写的时候用到了这些，但是没记住，于是就索性整理一下吧：</p>
<h2 id="os模块和shutil模块">os模块和shutil模块</h2>
<p>得到当前工作目录，即当前Python脚本工作的目录路径: <code>os.getcwd()</code><br>返回指定目录下的所有文件和目录名: <code>os.listdir()</code><br>函数用来删除一个文件: <code>os.remove()</code><br>删除多个目录: <code>os.removedirs（r“c：\python”）</code><br>检验给出的路径是否是一个文件: <code>os.path.isfile()</code><br>检验给出的路径是否是一个目录: <code>os.path.isdir()</code><br>判断是否是绝对路径: <code>os.path.isabs()</code><br>检验给出的路径是否真地存: <code>os.path.exists()</code><br>返回一个路径的目录名和文件名: <code>os.path.split()</code><br>分离扩展名: <code>os.path.splitext()</code><br>获取路径名: <code>os.path.dirname()</code><br>获取文件名: <code>os.path.basename()</code><br>运行shell命令: <code>os.system()</code><br>读取和设置环境变量: <code>os.getenv()</code> 与 <code>os.putenv()</code><br>给出当前平台使用的行终止符: <code>os.linesep</code> (Windows使用’\r\n’，Linux使用’\n’而Mac使用’\r’)<br>指示你正在使用的平台: <code>os.name</code> (对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’)<br>重命名: <code>os.rename（old, new）</code><br>创建多级目录: <code>os.makedirs（r“c：\python\test”）</code><br>创建单个目录: <code>os.mkdir（“test”）</code><br>获取文件属性: <code>os.stat（file）</code><br>修改文件权限与时间戳: <code>os.chmod（file）</code><br>终止当前进程: <code>os.exit（）</code><br>获取文件大小: <code>os.path.getsize（filename）</code></p>
<p><br></p>
<h2 id="文件操作">文件操作</h2>
<p><code>os.mknod(&quot;test.txt&quot;)</code> 创建空文件<br><code>fp = open(&quot;test.txt&quot;,w)</code> 直接打开一个文件，如果文件不存在则创建文件</p>
<p>关于open 模式：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">w</td>
<td style="text-align:left">以写方式打开</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">以追加模式打开 (从 EOF 开始, 必要时创建新文件)</td>
</tr>
<tr>
<td style="text-align:left">r+</td>
<td style="text-align:left">以读写模式打开</td>
</tr>
<tr>
<td style="text-align:left">w+</td>
<td style="text-align:left">以读写模式打开 (参见 w )</td>
</tr>
<tr>
<td style="text-align:left">a+</td>
<td style="text-align:left">以读写模式打开 (参见 a )</td>
</tr>
<tr>
<td style="text-align:left">rb</td>
<td style="text-align:left">以二进制读模式打开</td>
</tr>
<tr>
<td style="text-align:left">wb</td>
<td style="text-align:left">以二进制写模式打开 (参见 w )</td>
</tr>
<tr>
<td style="text-align:left">ab</td>
<td style="text-align:left">以二进制追加模式打开 (参见 a )</td>
</tr>
<tr>
<td style="text-align:left">rb+</td>
<td style="text-align:left">以二进制读写模式打开 (参见 r+ )</td>
</tr>
<tr>
<td style="text-align:left">wb+</td>
<td style="text-align:left">以二进制读写模式打开 (参见 w+ )</td>
</tr>
<tr>
<td style="text-align:left">ab+</td>
<td style="text-align:left">以二进制读写模式打开 (参见 a+ )</td>
</tr>
</tbody>
</table>
<p><code>fp.read([size])</code> #size为读取的长度，以byte为单位<br><code>fp.readline([size])</code> #读一行，如果定义了size，有可能返回的只是一行的一部分<br><code>fp.readlines([size])</code> #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。<br><code>fp.write(str)</code> #把str写到文件中，write()并不会在str后加上一个换行符<br><code>fp.writelines(seq)</code> #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。<br><code>fp.close()</code> #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError<br><code>fp.flush()</code> #把缓冲区的内容写入硬盘<br><code>fp.fileno()</code> #返回一个长整型的”文件标签“<br><code>fp.isatty()</code> #文件是否是一个终端设备文件（unix系统中的）<br><code>fp.tell()</code> #返回文件操作标记的当前位置，以文件的开头为原点<br><code>fp.next()</code> #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。<br><code>fp.seek(offset[,whence])</code> #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。<br><code>fp.truncate([size])</code> #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</p>
<p><br></p>
<h2 id="目录操作">目录操作</h2>
<p>创建目录 <code>os.mkdir(&quot;file&quot;)</code><br>复制文件:<br><code>shutil.copyfile(&quot;oldfile&quot;,&quot;newfile&quot;)</code> oldfile和newfile都只能是文件<br><code>shutil.copy(&quot;oldfile&quot;,&quot;newfile&quot;)</code> oldfile只能是文件夹，newfile可以是文件，也可以是目标目录<br>复制文件夹 <code>shutil.copytree(&quot;olddir&quot;,&quot;newdir&quot;)</code> olddir和newdir都只能是目录，且newdir必须不存在<br>重命名文件（目录） <code>os.rename(&quot;oldname&quot;,&quot;newname&quot;)</code> 文件或目录都是使用这条命令<br>移动文件（目录） <code>shutil.move(&quot;oldpos&quot;,&quot;newpos&quot;)</code><br>删除文件 <code>os.remove(&quot;file&quot;)</code><br>删除目录:<br><code>os.rmdir(&quot;dir&quot;)</code> 只能删除空目录<br><code>shutil.rmtree(&quot;dir&quot;)</code> 空目录、有内容的目录都可以删<br>转换目录 <code>os.chdir(&quot;path&quot;)</code></p>
<p><br></p>
<h2 id="相关例子">相关例子</h2>
<p><strong>将文件夹下所有图片名称加上’_fc’</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#str.split(string)分割字符串</span></div><div class="line"><span class="comment">#'连接符'.join(list) 将列表组成字符串</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_name</span><span class="params">(path)</span>:</span></div><div class="line">    <span class="keyword">global</span> i</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path) <span class="keyword">and</span> <span class="keyword">not</span> os.path.isfile(path):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> os.path.isfile(path):</div><div class="line">        file_path = os.path.split(path) <span class="comment">#分割出目录与文件</span></div><div class="line">        lists = file_path[<span class="number">1</span>].split(<span class="string">'.'</span>) <span class="comment">#分割出文件与文件扩展名</span></div><div class="line">        file_ext = lists[-<span class="number">1</span>] <span class="comment">#取出后缀名(列表切片操作)</span></div><div class="line">        img_ext = [<span class="string">'bmp'</span>,<span class="string">'jpeg'</span>,<span class="string">'gif'</span>,<span class="string">'psd'</span>,<span class="string">'png'</span>,<span class="string">'jpg'</span>]</div><div class="line">        <span class="keyword">if</span> file_ext <span class="keyword">in</span> img_ext:</div><div class="line">            os.rename(path,file_path[<span class="number">0</span>]+<span class="string">'/'</span>+lists[<span class="number">0</span>]+<span class="string">'_fc.'</span>+file_ext)</div><div class="line">            i+=<span class="number">1</span> <span class="comment">#注意这里的i是一个陷阱</span></div><div class="line">        <span class="comment">#或者</span></div><div class="line">        <span class="comment">#img_ext = 'bmp|jpeg|gif|psd|png|jpg'</span></div><div class="line">        <span class="comment">#if file_ext in img_ext:</span></div><div class="line">        <span class="comment">#    print('ok---'+file_ext)</span></div><div class="line">    <span class="keyword">elif</span> os.path.isdir(path):</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path):</div><div class="line">            change_name(os.path.join(path,x)) <span class="comment">#os.path.join()在路径处理上很有用</span></div><div class="line"></div><div class="line"></div><div class="line">img_dir = <span class="string">'D:\\xx\\xx\\images'</span></div><div class="line">img_dir = img_dir.replace(<span class="string">'\\'</span>,<span class="string">'/'</span>)</div><div class="line">start = time.time()</div><div class="line">i = <span class="number">0</span></div><div class="line">change_name(img_dir)</div><div class="line">c = time.time() - start</div><div class="line">print(<span class="string">'程序运行耗时:%0.2f'</span>%(c))</div><div class="line">print(<span class="string">'总共处理了 %s 张图片'</span>%(i))</div></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">程序运行耗时<span class="pseudo">:0</span><span class="class">.11</span></div><div class="line">总共处理了 109 张图片</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/rollenholt/archive/2012/04/23/24661]]>
    </summary>
    
      <category term="文件操作" scheme="http://moky.cc/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[QLabel中html标签的使用]]></title>
    <link href="http://moky.cc/2015/03/19/QLabel%E4%B8%ADhtml%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://moky.cc/2015/03/19/QLabel中html标签的使用/</id>
    <published>2015-03-19T08:02:41.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/imxiangzi/article/details/7749529" title="http://blog.csdn.net/imxiangzi/article/details/7749529" target="_blank" rel="external">http://blog.csdn.net/imxiangzi/article/details/7749529</a></p>
</blockquote>
<p>QLabel中显示的字符串是支持HTML标签的。如果应用好的话会达到很多方便快捷的效果。</p>
<p>举几个例子如下：<br>（1） 作为标题：<br>用一个QLabel对象，使其字体加大、加粗、居中，使用如下三个标签即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new QLabel("<span class="tag">&lt;<span class="title">font</span> <span class="attribute">size</span>=<span class="value">'+1'</span>&gt;</span><span class="tag">&lt;<span class="title">b</span>&gt;</span><span class="tag">&lt;<span class="title">p</span> <span class="attribute">align</span>=<span class="value">'center'</span>&gt;</span>标题<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">b</span>&gt;</span><span class="tag">&lt;/<span class="title">font</span>&gt;</span>", this, "title")</div></pre></td></tr></table></figure>

<p>（2） 加下划线：<br>使用<code>&lt;u&gt;&lt;/u&gt;</code>即可实现。</p>
<p>（3） 给局部加样式<br>还可以对text的部分内容添加标签，以使个别内容使用不同字体、样式，并且不影响整体字体。如，给字加颜色、大小、字体等。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">font</span> <span class="attribute">color</span>=<span class="value">'#5500ff'</span> <span class="attribute">size</span>=<span class="value">'+1'</span> <span class="attribute">face</span>=<span class="value">'Sans'</span>&gt;</span>被设置了字体<span class="tag">&lt;/<span class="title">font</span>&gt;</span></div></pre></td></tr></table></figure>

<p>（4） 画横线<br>使用<code>&lt;hr&gt;</code>即可实现。</p>
<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;qlayout.h&gt;   </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;qframe.h&gt;   </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;qlabel.h&gt;   </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;qfont.h&gt;   </span></div><div class="line">QVBoxLayout *vBox = <span class="keyword">new</span> QVBoxLayout(<span class="keyword">this</span>);  </div><div class="line">vBox-&gt;addWidget(<span class="keyword">new</span> QLabel(<span class="string">"&lt;font size='+1'&gt;&lt;b&gt;&lt;p align='center'&gt;标题&lt;/p&gt;&lt;/b&gt;&lt;/font&gt;"</span>, <span class="keyword">this</span>));<span class="comment">//标题   </span></div><div class="line">vBox-&gt;addWidget(<span class="keyword">new</span> QLabel(<span class="string">"&lt;hr&gt;"</span>, <span class="keyword">this</span>, <span class="string">"hr"</span>));<span class="comment">//在标题下面画一道横线   </span></div><div class="line"><span class="comment">/* </span></div><div class="line">//或是用下面的方法 </div><div class="line">QFrame *lbHr = new QFrame( this, "line4" ); </div><div class="line">lbHr-&gt;setGeometry( QRect( 1, 20, width()-2, 16 ) ); </div><div class="line">//lbHr-&gt;setPaletteBackgroundColor( QColor( 222, 199, 241 ) ); </div><div class="line">lbHr-&gt;setFrameShape( QFrame::HLine ); </div><div class="line">lbHr-&gt;setFrameShadow( QFrame::Sunken ); </div><div class="line">lbHr-&gt;setFrameShape( QFrame::HLine ); </div><div class="line">vBox-&gt;addWidget(lbHr);//横线 </div><div class="line">*/  </div><div class="line">vBox-&gt;addStretch(<span class="number">1</span>);  </div><div class="line">vBox-&gt;addWidget(<span class="keyword">new</span> QLabel(<span class="string">"&lt;u&gt;带下划线的label&lt;/u&gt;"</span>, <span class="keyword">this</span>));  </div><div class="line">QLabel *label = <span class="keyword">new</span> QLabel(<span class="string">"设置字体：&lt;font color='#5500ff' size='+1' face='Sans'&gt;被设置了字体&lt;/font&gt;"</span>, <span class="keyword">this</span>);  </div><div class="line"><span class="comment">//字体加粗，被设置字体部分同样加粗   </span></div><div class="line">QFont font = label-&gt;font();  </div><div class="line">font.setBold(<span class="keyword">true</span>);  </div><div class="line">label-&gt;setFont(font);  </div><div class="line">vBox-&gt;addWidget(label);  </div><div class="line">QLabel *label2 = <span class="keyword">new</span> QLabel(<span class="string">"设置字体未加粗：&lt;font color='#5500ff' size='+1' face='Sans'&gt;被设置了字体&lt;/font&gt;"</span>, <span class="keyword">this</span>);  </div><div class="line">vBox-&gt;addWidget(label2);</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/imxiangzi/article/details/7749529" ti]]>
    </summary>
    
      <category term="Qt" scheme="http://moky.cc/tags/Qt/"/>
    
      <category term="QLabel" scheme="http://moky.cc/tags/QLabel/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python中计算字符串中某个字符个数的4种方法]]></title>
    <link href="http://moky.cc/2015/03/18/Python%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://moky.cc/2015/03/18/Python中计算字符串中某个字符个数的4种方法/</id>
    <published>2015-03-18T02:40:30.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<h4 id="方法一">方法一</h4>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"abacad"</span></div><div class="line"><span class="keyword">print</span> s.count(<span class="string">"a"</span>)</div></pre></td></tr></table></figure>

<p><br></p>
<h4 id="方法二">方法二</h4>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">count = len(re.findall(<span class="string">"a"</span>,<span class="string">"abacad"</span>))</div><div class="line">print(count)</div></pre></td></tr></table></figure>

<p><br></p>
<h4 id="方法三">方法三</h4>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">s = <span class="string">"abacad"</span></div><div class="line">c = Counter(s)</div><div class="line"><span class="keyword">print</span> c[<span class="string">'a'</span>]</div></pre></td></tr></table></figure>

<p><br></p>
<h4 id="方法四">方法四</h4>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> len([ele <span class="keyword">for</span> ele <span class="keyword">in</span> <span class="string">'abacad'</span> <span class="keyword">if</span> ele == <span class="string">'a'</span>])</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<h4 id="方法一">方法一</h4>
<figure class="highlight python">]]>
    </summary>
    
      <category term="字符个数" scheme="http://moky.cc/tags/%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0/"/>
    
      <category term="字符串" scheme="http://moky.cc/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[绘制支持富文本带阴影自适应大小的Tooltips]]></title>
    <link href="http://moky.cc/2015/03/17/%E7%BB%98%E5%88%B6%E6%94%AF%E6%8C%81%E5%AF%8C%E6%96%87%E6%9C%AC%E5%B8%A6%E9%98%B4%E5%BD%B1%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F%E7%9A%84Tooltips/"/>
    <id>http://moky.cc/2015/03/17/绘制支持富文本带阴影自适应大小的Tooltips/</id>
    <published>2015-03-17T13:32:27.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>在日常开发中，我们经常会用到<code>Qt</code>的<code>Tooltips</code>，但是默认的样式不够美观，而且不支持富文本，于是一般情况都会重写<code>Tooltips</code>。</p>
<p>以下是我的实现，用了<code>QSS</code>样式表，所以不需要任何美术资源。阴影部分也是用<code>QtGui.QPainter</code>绘制的，可调节XY偏移值。富文本显示使用<code>html</code>标签，所以换行需要手动输入<code>&lt;br&gt;</code>，<code>Tooltips</code>会自动适应大小。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtCore, QtGui</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tooltips</span><span class="params">(QtGui.QMainWindow)</span>:</span></div><div class="line">    TOOLTIPS_LINE_HEIGHT = <span class="number">18</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent)</span>:</span></div><div class="line">        super(Tooltips, self).__init__(parent)</div><div class="line">        self.setWindowFlags(QtCore.Qt.Window | QtCore.Qt.FramelessWindowHint)</div><div class="line">        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)</div><div class="line">        self.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors)</div><div class="line">        self.setAttribute(QtCore.Qt.WA_ShowWithoutActivating)</div><div class="line">        self.hide()</div><div class="line">        self.setStyleSheet(<span class="string">'Tooltips &gt; QLabel {border: 1px solid #f56133; border-radius: 4px; background: #ffffff; font: normal 12px '</span>Microsoft Yahei<span class="string">'; padding: 8px;}'</span>)</div><div class="line"></div><div class="line">        self._actualWidth = <span class="number">150</span></div><div class="line">        self._actualHeight = <span class="number">50</span></div><div class="line">        self._offsetXShadow = <span class="number">5</span></div><div class="line">        self._offsetYShadow = <span class="number">5</span></div><div class="line"></div><div class="line">        self._labelText = QtGui.QLabel(self)</div><div class="line">        self._labelText.setWordWrap(<span class="keyword">True</span>)</div><div class="line">        self._labelText.move(<span class="number">0</span>, <span class="number">0</span>)</div><div class="line">        self._labelText.setText(<span class="string">u''</span>)</div><div class="line">        self._labelText.setAlignment(QtCore.Qt.AlignVCenter)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setText</span><span class="params">(self, str_text)</span>:</span></div><div class="line">        self._labelText.setText(str_text)</div><div class="line">        self.adjustSize()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">text</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._labelText.text()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(self, *__args)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(__args) == <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(__args[<span class="number">0</span>], QtCore.QSize):</div><div class="line">                <span class="keyword">return</span></div><div class="line">            self._actualWidth = __args[<span class="number">0</span>].width()</div><div class="line">            self._actualHeight = __args[<span class="number">0</span>].height()</div><div class="line">            super(Tooltips, self).resize(__args[<span class="number">0</span>] + QtCore.QSize(self._offsetXShadow, self._offsetYShadow))</div><div class="line">        <span class="keyword">elif</span> len(__args) == <span class="number">2</span>:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(self._actualWidth, int):</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(self._actualHeight, int):</div><div class="line">                <span class="keyword">return</span></div><div class="line">            self._actualWidth = __args[<span class="number">0</span>]</div><div class="line">            self._actualHeight = __args[<span class="number">1</span>]</div><div class="line">            super(Tooltips, self).resize(self._actualWidth + self._offsetXShadow,</div><div class="line">                                         self._actualHeight + self._offsetYShadow)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resizeEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        self._labelText.resize(event.size() - QtCore.QSize(self._offsetXShadow, self._offsetYShadow))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></div><div class="line">        painter = QtGui.QPainter(self)</div><div class="line">        painter.setRenderHint(QtGui.QPainter.Antialiasing, <span class="keyword">True</span>)</div><div class="line">        color = QtGui.QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</div><div class="line">            path = QtGui.QPainterPath()</div><div class="line">            path.setFillRule(QtCore.Qt.WindingFill)</div><div class="line">            path.addRect(<span class="number">10</span> - i, <span class="number">10</span> - i, super(Tooltips, self).width() - (<span class="number">10</span> - i) * <span class="number">2</span>,</div><div class="line">                         super(Tooltips, self).height() - (<span class="number">10</span> - i) * <span class="number">2</span>)</div><div class="line">            color.setAlpha(<span class="number">150</span> - math.sqrt(i) * <span class="number">50</span>)</div><div class="line">            painter.setPen(color)</div><div class="line">            painter.drawPath(path)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._actualWidth</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._actualHeight</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> QtCore.QSize(self._actualWidth, self._actualHeight)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adjustSize</span><span class="params">(self)</span>:</span></div><div class="line">        orgText = self.text()</div><div class="line">        countLF = orgText.count(<span class="string">'&lt;br&gt;'</span>) + <span class="number">1</span></div><div class="line">        plainText = orgText.replace(<span class="string">'&lt;br&gt;'</span>, <span class="string">'\n'</span>).replace(QtCore.QRegExp(<span class="string">'&lt;[^&gt;]+&gt;'</span>), <span class="string">''</span>).replace(<span class="string">'&nbsp;'</span>, <span class="string">' '</span>)</div><div class="line">        tgtWidth = self._maxLineWidth(plainText)</div><div class="line">        tgtRect = QtCore.QSize(tgtWidth, Tooltips.TOOLTIPS_LINE_HEIGHT * countLF + <span class="number">19</span>)</div><div class="line">        <span class="keyword">if</span> self.width() != tgtRect.width() <span class="keyword">or</span> self.height() != tgtRect.height():</div><div class="line">            self.resize(tgtRect)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_maxLineWidth</span><span class="params">(self, text)</span>:</span></div><div class="line">        maxLineWidth = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> text.split(<span class="string">'\n'</span>):</div><div class="line">            <span class="keyword">if</span> line == <span class="string">''</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            tmpWidth = self._labelText.fontMetrics().width(line) + <span class="number">24</span></div><div class="line">            <span class="keyword">if</span> tmpWidth &gt; maxLineWidth:</div><div class="line">                maxLineWidth = tmpWidth</div><div class="line">        <span class="keyword">return</span> maxLineWidth</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setShadowOffset</span><span class="params">(self, int_offsetX, int_offsetY)</span>:</span></div><div class="line">        self._offsetXShadow = int_offsetX</div><div class="line">        self._offsetYShadow = int_offsetY</div><div class="line">        self.resize(self._actualWidth, self._actualHeight)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>在日常开发中，我们经常会用到<code>Qt</code>的<code>Tooltips</code>，]]>
    </summary>
    
      <category term="Qt" scheme="http://moky.cc/tags/Qt/"/>
    
      <category term="Tooltips" scheme="http://moky.cc/tags/Tooltips/"/>
    
      <category term="富文本" scheme="http://moky.cc/tags/%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
    
      <category term="阴影" scheme="http://moky.cc/tags/%E9%98%B4%E5%BD%B1/"/>
    
      <category term="自适应" scheme="http://moky.cc/tags/%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt之正则表达式]]></title>
    <link href="http://moky.cc/2015/03/16/Qt%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://moky.cc/2015/03/16/Qt之正则表达式/</id>
    <published>2015-03-16T13:00:07.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/phay/article/details/7304455" title="http://blog.csdn.net/phay/article/details/7304455" target="_blank" rel="external">http://blog.csdn.net/phay/article/details/7304455</a></p>
</blockquote>
<p>QRegExp是Qt的正则表达式类.<br>Qt中有两个不同类的正则表达式.<br>第一类为元字符.它表示一个或多个常量表达式.<br>令一类为 转义字符,它代表一个特殊字符.</p>
<p><strong>一.元字符</strong><br>.  匹配任意单个字符.例如, 1.3 可能是1. 后面跟任意字符,再跟3<br>^ 匹配字符串首. 例如, ^12可能是123,但不能是312<br>$  配字符串尾. 例如, 12$可以是312, 当不能是 123<br>[] 匹配括号内输入的任意字符.[123]可以为1, 2 或3<br>*  匹配任意数量的前导字符. 例如, 1*2可以为任意数量个1(甚至没有), 后面跟一个2<br>+ 匹配至少一个前导字符. 例如, 1+2必须为一个或多个1, 后跟一个2<br>?  匹配一个前导字符或为空. 例如 1?2可以为2或这12</p>
<p><strong>二.统配模式</strong><br>通过 QRegExp::setPatternSyntax(QRegExp::Wildcard);可以将元字符设置为统配模式.在统配模式下,只有3个元字 符可以使用.他们的功能没有变化.<br>? 匹配任意单个字符, 例如, 1?2可以为1,后面跟任意单个字符, 再跟2<br>* 匹配任意一个字符序列. 例如, 1*2, 可以为1, 后面跟任意数量的字符, 再跟一个2<br>[] 匹配一个定义的字符集合. 例如, [a-zA-Z.]可以匹配 a到z之间任意一个字符和.  [^a]匹配出小写a以外的字符.</p>
<p><strong>三.转义序列</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\.</td>
<td style="text-align:left">匹配”.”</td>
</tr>
<tr>
<td style="text-align:center">\^</td>
<td style="text-align:left">匹配”^”</td>
</tr>
<tr>
<td style="text-align:center">\$</td>
<td style="text-align:left">匹配”$”</td>
</tr>
<tr>
<td style="text-align:center">\[</td>
<td style="text-align:left">匹配”[“</td>
</tr>
<tr>
<td style="text-align:center">\]</td>
<td style="text-align:left">匹配”]”</td>
</tr>
<tr>
<td style="text-align:center">\*</td>
<td style="text-align:left">匹配”*”</td>
</tr>
<tr>
<td style="text-align:center">\+</td>
<td style="text-align:left">匹配”+”</td>
</tr>
<tr>
<td style="text-align:center">\?</td>
<td style="text-align:left">匹配”?”</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:left">匹配响铃字符,使计算机发出嘟的一声.</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:left">制表符号</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:left">换行符号</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:left">回车符鉿</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:left">任意空格</td>
</tr>
<tr>
<td style="text-align:center">\xnn</td>
<td style="text-align:left">匹配16进制为nn的字符</td>
</tr>
<tr>
<td style="text-align:center">\0nn</td>
<td style="text-align:left">匹配8进制的nn字符</td>
</tr>
</tbody>
</table>
<p>这些表达式均以\开始, 与C++的转义字符相同,所以为了定义QRegExp中的一个转义序列,<br>需要在前面添加两个\<br><br></p>
<ul>
<li><strong>用正则表达式验证文本有效性</strong></li>
</ul>
<p>你可以使用QRegExp::exactMatch来判断一个字符串是否符合一个pattern。</p>
<figure class="highlight cplusplus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="literal">void</span> testRegexMatch()</div><div class="line">{</div><div class="line">    QString pattern(“<span class="built_in">.</span><span class="subst">*=</span><span class="built_in">.</span><span class="subst">*</span>”);</div><div class="line">    QRegExp <span class="literal">rx</span>(pattern);</div><div class="line"></div><div class="line">    bool <span class="keyword">match</span> <span class="subst">=</span> <span class="literal">rx</span><span class="built_in">.</span>exactMatch(“a<span class="subst">=</span><span class="number">3</span>″);</div><div class="line">    qDebug() <span class="subst">&lt;&lt;</span> <span class="keyword">match</span>;                      <span class="comment">// True</span></div><div class="line"></div><div class="line">    <span class="keyword">match</span> <span class="subst">=</span> <span class="literal">rx</span><span class="built_in">.</span>exactMatch(“a/<span class="number">2</span>″);</div><div class="line">    qDebug() <span class="subst">&lt;&lt;</span> <span class="keyword">match</span>;                      <span class="comment">// False</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<ul>
<li><strong>用正则表达式提取数据</strong></li>
</ul>
<p>你可以利用利用正则表达式从一个字符串里提取特定的字段或数据。例如，你可以用以下代码从”a=100″里提取”a”和”100″。</p>
<figure class="highlight cplusplus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="literal">void</span> testRegexCapture()</div><div class="line">{</div><div class="line">    QString pattern(“(<span class="built_in">.</span><span class="subst">*</span>)<span class="subst">=</span>(<span class="built_in">.</span><span class="subst">*</span>)”);</div><div class="line">    QRegExp <span class="literal">rx</span>(pattern);</div><div class="line"></div><div class="line">    QString str(“a<span class="subst">=</span><span class="number">100</span>″);</div><div class="line">    int pos <span class="subst">=</span> str<span class="built_in">.</span>indexOf(<span class="literal">rx</span>);              <span class="comment">// 0, position of the first match.</span></div><div class="line">                                            <span class="comment">// Returns -1 if str is not found.</span></div><div class="line">                                            <span class="comment">// You can also use rx.indexIn(str);</span></div><div class="line">    qDebug() <span class="subst">&lt;&lt;</span> pos;</div><div class="line">    <span class="keyword">if</span> ( pos <span class="subst">&gt;=</span> <span class="number">0</span> )</div><div class="line">    {</div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>matchedLength();     <span class="comment">// 5, length of the last matched string</span></div><div class="line">                                            <span class="comment">// or -1 if there was no match</span></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>capturedTexts();     <span class="comment">// QStringList(“a=100″, ”a”, ”100″),</span></div><div class="line">                                            <span class="comment">//   0: text matching pattern</span></div><div class="line">                                            <span class="comment">//   1: text captured by the 1st ()</span></div><div class="line">                                            <span class="comment">//   2: text captured by the 2nd ()</span></div><div class="line"></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>cap(<span class="number">0</span>);              <span class="comment">// a=100, text matching pattern</span></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>cap(<span class="number">1</span>);              <span class="comment">// a, text captured by the nth ()</span></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>cap(<span class="number">2</span>);              <span class="comment">// 100,</span></div><div class="line"></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>pos(<span class="number">0</span>);              <span class="comment">// 0, position of the nth captured text</span></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>pos(<span class="number">1</span>);              <span class="comment">// 0</span></div><div class="line">        qDebug() <span class="subst">&lt;&lt;</span> <span class="literal">rx</span><span class="built_in">.</span>pos(<span class="number">2</span>);              <span class="comment">// 2</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<ul>
<li><strong>用正则表达式修改文本</strong></li>
</ul>
<p>你可以把字符串中匹配的字符串替换成”一般字符串”</p>
<figure class="highlight cplusplus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QString <span class="variable">s =</span> ”<span class="variable">a=</span><span class="number">100</span>″;</div><div class="line">s.replace(QRegExp(“(.*)=”), ”<span class="variable">b=</span>”);</div><div class="line">qDebug() &lt;&lt; s;                          // <span class="variable">b=</span><span class="number">100</span></div></pre></td></tr></table></figure>

<p>或是把字符串中匹配的字符串替换”提取的字符串”</p>
<figure class="highlight cplusplus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag"><span class="attribute">QString</span> <span class="attribute">s</span> = ”<span class="attribute">a</span>=<span class="value">100″;</span></span></span></div><div class="line"><span class="attribute">s.replace</span>(<span class="attribute">QRegExp</span>(“(<span class="attribute">.</span>*)=<span class="value">(.*)”),</span> ”\\<span class="attribute">1</span>\\<span class="attribute">2</span>=<span class="value">\\2″);</span>  // \<span class="attribute">1</span> <span class="attribute">is</span> <span class="attribute">rx.cap</span>(<span class="attribute">1</span>), \<span class="attribute">2</span> <span class="attribute">is</span> <span class="attribute">rx.cap</span>(<span class="attribute">2</span>)</div><div class="line"><span class="attribute">qDebug</span>() &lt;&lt; <span class="attribute">s</span>;                                  // <span class="attribute">a100</span>=<span class="value">100</span></div></pre></td></tr></table></figure>

<p><br></p>
<ul>
<li><strong>把正则表达式转换成C/C++ string的小工具</strong></li>
</ul>
<p>没有Python的”””或是C#的@。标准的正则表达式因为出现一些特殊字符，在C/C++代码里使用时，必须进行转换。例如：”(\S+)\s<em>=\s</em>(\S<em>)”必须转换成”(\S+)\s</em>=\s<em>(\S</em>)”</p>
<p>Qt的SDK里包含一个很帮的GUI工具，可以方便我们进行这类转换并测试你的表达式。在Linux下，它的路径是/usr/local/Trolltech/Qt-4.5.3/examples/tools/regexp/regexp </p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/phay/article/details/7304455" title="]]>
    </summary>
    
      <category term="Qt" scheme="http://moky.cc/tags/Qt/"/>
    
      <category term="正则表达式" scheme="http://moky.cc/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python使用正则表达式获得html标签数据]]></title>
    <link href="http://moky.cc/2015/03/15/Python%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%8E%B7%E5%BE%97html%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE/"/>
    <id>http://moky.cc/2015/03/15/Python使用正则表达式获得html标签数据/</id>
    <published>2015-03-15T12:33:00.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>记录一下，获取html标签里面的<code>14℃</code>，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#-*- coding: utf8 -*-</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">html = <span class="string">'&lt;div class="w-number"&gt;&lt;span class="tpte"&gt;14℃&lt;/span&gt;&lt;/div&gt;'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    p = re.compile(<span class="string">'&lt;[^&gt;]+&gt;'</span>)</div><div class="line">    <span class="keyword">print</span> p.sub(<span class="string">''</span>, html)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>记录一下，获取html标签里面的<code>14℃</code>，代码如下：</p>
<figure c]]>
    </summary>
    
      <category term="正则表达式" scheme="http://moky.cc/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="获得html标签数据" scheme="http://moky.cc/tags/%E8%8E%B7%E5%BE%97html%E6%A0%87%E7%AD%BE%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决UnicodeEncodeError: 'ascii' codec can't encode characters in position问题]]></title>
    <link href="http://moky.cc/2015/03/14/%E8%A7%A3%E5%86%B3UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position%E9%97%AE%E9%A2%98/"/>
    <id>http://moky.cc/2015/03/14/解决UnicodeEncodeError-ascii-codec-can-t-encode-characters-in-position问题/</id>
    <published>2015-03-14T03:20:41.000Z</published>
    <updated>2015-05-11T01:14:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html" title="http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html</a></p>
</blockquote>
<p>今天把一个列表转换成字符串输出的时候出现了<code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 32-34: ordinal not in range(128)</code>问题，使用的是<code>ulipad</code>编译器。</p>
<p><strong>解决方法1：</strong><br>在开头加上</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding( <span class="string">"utf-8"</span> )</div></pre></td></tr></table></figure>

<p><strong>解决方法2：</strong><br>使用cmd运行python程序，能正常显示结果</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_64a3795a01018vyp.html" titl]]>
    </summary>
    
      <category term="UnicodeEncodeError" scheme="http://moky.cc/tags/UnicodeEncodeError/"/>
    
      <category term="ascii" scheme="http://moky.cc/tags/ascii/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
</feed>
