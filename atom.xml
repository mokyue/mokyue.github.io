<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[One Night in Mok's Studio]]></title>
  <subtitle><![CDATA[Life is a beautiful struggle.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://moky.cc/"/>
  <updated>2015-07-15T13:51:56.359Z</updated>
  <id>http://moky.cc/</id>
  
  <author>
    <name><![CDATA[Moky]]></name>
    <email><![CDATA[mokyue@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ifndef/define/endif作用和用法]]></title>
    <link href="http://moky.cc/2015/07/15/ifndef-define-endif%E4%BD%9C%E7%94%A8%E5%92%8C%E7%94%A8%E6%B3%95/"/>
    <id>http://moky.cc/2015/07/15/ifndef-define-endif作用和用法/</id>
    <published>2015-07-15T12:14:06.000Z</published>
    <updated>2015-07-15T12:23:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_6398cade0100hi69.html" title="http://blog.sina.com.cn/s/blog_6398cade0100hi69.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_6398cade0100hi69.html</a></p>
</blockquote>
<p><strong>问题</strong>：ifndef/define/endif”主要目的是防止头文件的重复包含和编译,偶只知道这个概念不懂的是怎么个用法,和为什么要用它~~高手请指点一下~~谢谢~~~!!!</p>
<p><strong>用法</strong>：<br>.h文件，如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef XX_H</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> XX_H</span></div><div class="line">...</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>这样如果有两个地方都包含这个头文件，就不会出现两次包含的情况 。。<br>因为在第二次包含时 XX_H 已经有定义了，所以就不再 include了</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef GRAPHICS_H <span class="comment">// 防止graphics.h被重复引用</span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> GRAPHICS_H</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;math.h&gt; <span class="comment">// 引用标准库的头文件</span></span></div><div class="line">…</div><div class="line"><span class="preprocessor">#include “myheader.h” <span class="comment">// 引用非标准库的头文件</span></span></div><div class="line">…</div><div class="line"><span class="keyword">void</span> Function1(…); <span class="comment">// 全局函数声明</span></div><div class="line">…</div><div class="line"><span class="keyword">class</span> Box <span class="comment">// 类结构声明</span></div><div class="line">{</div><div class="line">…</div><div class="line">};</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>那是指你建立多个文件时，多个文件里都包含这个头文件<br>给你举个例子，再顺便分析一下：<br>假设你的工程里面有4个文件，分别是a.cpp,b.h,c.h,d.h。<br>a.cpp的头部是：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "b.h "</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "c.h "</span></div></pre></td></tr></table></figure>

<p>b.h和c.h的头部都是:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "d.h "</span></div></pre></td></tr></table></figure>

<p>而d.h里面有class D的定义。</p>
<p>这样一来，<br>编译器编译a.cpp的时候，先根据#include “b.h “去编译b.h这个问题，再根据b.h里面的#include “d.h “，去编译d.h的这个文件，这样就把d.h里面的class D编译了；<br>然后再根据a.cpp的第二句#include “c.h “，去编译c.h，最终还是会找到的d.h里面的class D，但是class D之前已经编译过了，所以就会报重定义错误。</p>
<p>加上ifndef/define/endif，就可以防止这种重定义错误。</p>
<p>A.h 里</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef A_H</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> A_H</span></div><div class="line">...</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>B.h 和 C.h都include “A.h “</p>
<p>D.h里</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include <span class="string">"B.h "</span></div><div class="line">include <span class="string">"C.h "</span></div></pre></td></tr></table></figure>

<p>在预编译的过程中，执行到include “C.h “时会因为在上一句的时候已经定义了A_H这个宏，所以此时的的<br>的ifndef条件不满足，也就不会再一次包含A.h，起到了防止重复引用头文件的效果。</p>
<p>1.比如你有两个C文件，这两个C文件都include了同一个头文件。而编译时，这两个C文件要一同编译成一个可运行文件，于是问题来了，大量的声明冲突。 还是把头文件的内容都放在#ifndef和#endif中吧。<br>不管你的头文件会不会被多个文件引用，你都要加上这个。<br>一般格式是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef &lt;标识&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> &lt;标识&gt;</span></div><div class="line">......</div><div class="line">......</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span> &lt;标识&gt;</span></div></pre></td></tr></table></figure>

<p>在理论上来说可以是自由命名的，但每个头文件的这个“标识”都应该是唯一的。标识的命名规则一般是头文件名全大写，前后加下划线，并把文件名中的“.”也变成下划线，如：stdio.h</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef _STDIO_H_</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> _STDIO_H_</span></div><div class="line">......</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>2.在#ifndef中定义变量出现的问题（一般不定义在#ifndef中）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef AAA</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> AAA</span></div><div class="line">...</div><div class="line"><span class="keyword">int</span> i;</div><div class="line">...</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p>里面有一个变量定义在vc中链接时就出现了i重复定义的错误，而在c中成功编译。<br><strong>原因</strong>：</p>
<ol>
<li>当你第一个使用这个头的.cpp文件生成.obj的时候，int i 在里面定义了当另外一个使用这个的.cpp再次[单独]生成.obj的时候，int i 又被定义然后两个obj被另外一个.cpp也include 这个头的，连接在一起，就会出现重复定义.</li>
<li>把源程序文件扩展名改成.c后，VC按照C语言的语法对源程序进行编译，而不是C++。在C语言中，若是遇到多个int i，则自动认为其中一个是定义，其他的是声明。</li>
<li>C语言和C++语言连接结果不同，可能（猜测）时在进行编译的时候，C++语言将全局变量默认为强符号，所以连接出错。C语言则依照是否初始化进行强弱的判断的。</li>
</ol>
<p><strong>参考解决方法</strong>：</p>
<ol>
<li>把源程序文件扩展名改成.c。</li>
<li>推荐解决方案： .h中只声明 extern int i;<br>在.cpp中定义</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef __X_H__</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> __X_H__</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">//__X_H__ int i;</span></span></div></pre></td></tr></table></figure>

<p>注意问题：变量一般不要定义在.h文件中。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_6398cade0100hi69.html" titl]]>
    </summary>
    
      <category term="ifndef" scheme="http://moky.cc/tags/ifndef/"/>
    
      <category term="define" scheme="http://moky.cc/tags/define/"/>
    
      <category term="endif" scheme="http://moky.cc/tags/endif/"/>
    
      <category term="C++" scheme="http://moky.cc/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[error C2065：未声明的标识符错误]]></title>
    <link href="http://moky.cc/2015/07/14/error-C2065%EF%BC%9A%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E9%94%99%E8%AF%AF/"/>
    <id>http://moky.cc/2015/07/14/error-C2065：未声明的标识符错误/</id>
    <published>2015-07-14T12:28:25.000Z</published>
    <updated>2015-07-15T12:31:16.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_8216ada701017evx.html" title="http://blog.sina.com.cn/s/blog_8216ada701017evx.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_8216ada701017evx.html</a></p>
</blockquote>
<p>在VS2010下进行VC++调试时，出现这样一种错误：error C2065：未声明的标识符，当时感觉十分怪异，为什么说怪异呢？因为如果在.cpp中未引入相关.h文件出现这样的错误很正常，但是现在是已经引入了相关的头文件，却还是出现了诸如error C2065、error C2087、error C2133…的错误。</p>
<p>情况是这样的，新建了一个工程项目，想使用其他工程中定义的同一组.cpp/.h文件，完全copy文件中的代码，可是在新建的工程中却提示了上述错误，却在其原先的工程中未出现错误，同一台机器出现了这样的错误，当时想到的是这两个工程项目的属性配置不同，所以就使新的工程项目的属性改变为原先的工程项目属性，但是仍然出现这样的错误，在网上搜寻这方面的资料，大部分都介绍是未引入相关的头文件，毕竟错误提示是：未声明的标识符，但是那样改来改去未解决问题。</p>
<p>最终解决办法是修改了一下其头文件的顺序，原先copy时“#include “StdAfx.h””在几个头文件的最后位置，将其提前到最前位置，问题得到解决。原来不仅要引入相关的头文件，其位置也要放正确。当然预编译头文件应该放在最前位置吧，不过在原先的工程中放在最后却没有错误，怪哉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_8216ada701017evx.html" titl]]>
    </summary>
    
      <category term="C2065" scheme="http://moky.cc/tags/C2065/"/>
    
      <category term="未声明的标识符错误" scheme="http://moky.cc/tags/%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%9A%84%E6%A0%87%E8%AF%86%E7%AC%A6%E9%94%99%E8%AF%AF/"/>
    
      <category term="C++" scheme="http://moky.cc/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++中获取系统变量的几种方法]]></title>
    <link href="http://moky.cc/2015/07/13/C-%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://moky.cc/2015/07/13/C-中获取系统变量的几种方法/</id>
    <published>2015-07-13T01:15:11.000Z</published>
    <updated>2015-07-13T01:33:23.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<h2 id="使用Qt里的QProcessEnvironment::systemEnvironment()">使用<code>Qt</code>里的<code>QProcessEnvironment::systemEnvironment()</code></h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QProcessEnvironment::systemEnvironment().value(<span class="string">"APPDATA"</span>)</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="使用stdlib里的getenv()">使用<code>stdlib</code>里的<code>getenv()</code></h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>)</div><div class="line">{</div><div class="line">    <span class="keyword">char</span> *pathvar;</div><div class="line">    pathvar = getenv(<span class="string">"PATH"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pathvar=%s"</span>,pathvar);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="使用winapi里的GetEnvironmentVariable()">使用<code>winapi</code>里的<code>GetEnvironmentVariable()</code></h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">DWORD</span> WINAPI GetEnvironmentVariable(</div><div class="line">  _In_opt_  LPCTSTR lpName,</div><div class="line">  _Out_opt_ LPTSTR  lpBuffer,</div><div class="line">  _In_      <span class="preprocessor">DWORD</span>   nSize</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<h2 id="使用Qt里的QProcessEnvironment::systemEnvironment()"]]>
    </summary>
    
      <category term="系统变量" scheme="http://moky.cc/tags/%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F/"/>
    
      <category term="C++" scheme="http://moky.cc/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python单例模式实例]]></title>
    <link href="http://moky.cc/2015/07/12/Python%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B/"/>
    <id>http://moky.cc/2015/07/12/Python单例模式实例/</id>
    <published>2015-07-12T07:19:17.000Z</published>
    <updated>2015-07-12T07:56:17.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<h2 id="定义">定义</h2>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># singleton.py</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls, *args, **kw)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">        单列模式</div><div class="line">    """</div><div class="line">    instances = {}</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</div><div class="line">            instances[cls] = cls(*args, **kw)</div><div class="line">        <span class="keyword">return</span> instances[cls]</div><div class="line">    <span class="keyword">return</span> _singleton</div></pre></td></tr></table></figure>

<h2 id="实例">实例</h2>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> singleton  <span class="comment"># 导入上面的定义</span></div><div class="line"><span class="decorator">@singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyController</span><span class="params">()</span>:</span></div><div class="line">    ...</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<h2 id="定义">定义</h2>
<figure class="highlight python"><t]]>
    </summary>
    
      <category term="单例模式" scheme="http://moky.cc/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="singleton" scheme="http://moky.cc/tags/singleton/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python中计算一个整形的位数]]></title>
    <link href="http://moky.cc/2015/07/11/Python%E4%B8%AD%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E6%95%B4%E5%BD%A2%E7%9A%84%E4%BD%8D%E6%95%B0/"/>
    <id>http://moky.cc/2015/07/11/Python中计算一个整形的位数/</id>
    <published>2015-07-11T07:58:02.000Z</published>
    <updated>2015-07-12T08:02:46.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">input = <span class="number">8985315</span></div><div class="line">digits = <span class="number">0</span></div><div class="line">i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> input / i &gt; <span class="number">0</span>:</div><div class="line">    digits += <span class="number">1</span></div><div class="line">    i *= <span class="number">10</span></div><div class="line"><span class="keyword">print</span> digits</div><div class="line"><span class="comment"># result: 7</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="]]>
    </summary>
    
      <category term="计算位数" scheme="http://moky.cc/tags/%E8%AE%A1%E7%AE%97%E4%BD%8D%E6%95%B0/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt里使QTooltips显示禁用Html支持]]></title>
    <link href="http://moky.cc/2015/07/10/Qt%E9%87%8C%E4%BD%BFQTooltips%E6%98%BE%E7%A4%BA%E7%A6%81%E7%94%A8Html%E6%94%AF%E6%8C%81/"/>
    <id>http://moky.cc/2015/07/10/Qt里使QTooltips显示禁用Html支持/</id>
    <published>2015-07-10T03:05:19.000Z</published>
    <updated>2015-07-12T08:21:12.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">info = <span class="string">"&lt;p&gt;text&lt;/p&gt;"</span></div><div class="line">labelInfo.setToolTip(info.replace(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>))</div></pre></td></tr></table></figure>

<p><br><br>还有个小窍门，默认的QTooltips如果显示宋体，而你想把它设置为微软雅黑的话，可以用下面的方法:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">info = <span class="string">"&lt;p&gt;text&lt;/p&gt;"</span></div><div class="line">labelInfo.setToolTip(<span class="string">"&lt;pre style=\"font-family: \'Microsoft Yahei\';\"&gt;%s&lt;/pre&gt;"</span> % info.replace(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>))</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="]]>
    </summary>
    
      <category term="QTooltips" scheme="http://moky.cc/tags/QTooltips/"/>
    
      <category term="禁用Html支持" scheme="http://moky.cc/tags/%E7%A6%81%E7%94%A8Html%E6%94%AF%E6%8C%81/"/>
    
      <category term="PyQt" scheme="http://moky.cc/categories/PyQt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义窗口淡出淡入动画效果]]></title>
    <link href="http://moky.cc/2015/07/09/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AA%97%E5%8F%A3%E6%B7%A1%E5%87%BA%E6%B7%A1%E5%85%A5%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://moky.cc/2015/07/09/自定义窗口淡出淡入动画效果/</id>
    <published>2015-07-09T08:29:21.000Z</published>
    <updated>2015-07-12T08:35:57.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>把下面代码加到你自定义的Widget里面即可:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">class MyWidget(QtGui<span class="built_in">.</span>QWidget):</div><div class="line">    def __init__(<span class="built_in">self</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_visible <span class="subst">=</span> <span class="literal">False</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAniFinished <span class="subst">=</span> <span class="literal">True</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAniFinished <span class="subst">=</span> <span class="literal">True</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni <span class="subst">=</span> <span class="literal">None</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni <span class="subst">=</span> <span class="literal">None</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_initAni()</div><div class="line"> </div><div class="line">    def _initAni(<span class="built_in">self</span>):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        初始化动画效果</div><div class="line">        :return:</div><div class="line">        "<span class="string">""</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni <span class="subst">=</span> QtCore<span class="built_in">.</span>QPropertyAnimation(<span class="built_in">self</span>, <span class="string">"windowOpacity"</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni<span class="built_in">.</span>setDuration(<span class="number">100</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni<span class="built_in">.</span>setStartValue(<span class="number">0</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni<span class="built_in">.</span>setEndValue(<span class="number">1</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni<span class="built_in">.</span>finished<span class="built_in">.</span>connect(<span class="built_in">self</span><span class="built_in">.</span>_setFadeInAniFinished)</div><div class="line"> </div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni <span class="subst">=</span> QtCore<span class="built_in">.</span>QPropertyAnimation(<span class="built_in">self</span>, <span class="string">"windowOpacity"</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni<span class="built_in">.</span>setDuration(<span class="number">150</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni<span class="built_in">.</span>setStartValue(<span class="number">1</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni<span class="built_in">.</span>setEndValue(<span class="number">0</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni<span class="built_in">.</span>finished<span class="built_in">.</span>connect(<span class="built_in">self</span><span class="built_in">.</span>_setFadeOutAniFinished)</div><div class="line"> </div><div class="line">    def setVisible(<span class="built_in">self</span>, bool_visible):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        设置是否可见</div><div class="line">        :param bool_visible:</div><div class="line">        :return:</div><div class="line">        "<span class="string">""</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_visible <span class="subst">=</span> bool_visible</div><div class="line">        <span class="keyword">if</span> bool_visible:</div><div class="line">            <span class="keyword">if</span> <span class="literal">not</span> <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAniFinished:</div><div class="line">                <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni<span class="built_in">.</span>stop()</div><div class="line">                <span class="built_in">self</span><span class="built_in">.</span>_setFadeOutAniFinished()</div><div class="line">            <span class="keyword">if</span> <span class="literal">not</span> <span class="built_in">self</span><span class="built_in">.</span>_fadeInAniFinished:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="built_in">self</span><span class="built_in">.</span>_fadeInAniFinished <span class="subst">=</span> <span class="literal">False</span></div><div class="line">            super(TipsWindow, <span class="built_in">self</span>)<span class="built_in">.</span>setVisible(<span class="literal">True</span>)</div><div class="line">            <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni<span class="built_in">.</span>start()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> <span class="literal">not</span> <span class="built_in">self</span><span class="built_in">.</span>_fadeInAniFinished:</div><div class="line">                <span class="built_in">self</span><span class="built_in">.</span>_fadeInAni<span class="built_in">.</span>stop()</div><div class="line">                <span class="built_in">self</span><span class="built_in">.</span>_setFadeInAniFinished()</div><div class="line">            <span class="keyword">if</span> <span class="literal">not</span> <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAniFinished:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAniFinished <span class="subst">=</span> <span class="literal">False</span></div><div class="line">            <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAni<span class="built_in">.</span>start()</div><div class="line"> </div><div class="line">    def isVisible(<span class="built_in">self</span>):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        是否可见</div><div class="line">        :return:</div><div class="line">        "<span class="string">""</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">self</span><span class="built_in">.</span>_visible</div><div class="line"> </div><div class="line">    def _setFadeInAniFinished(<span class="built_in">self</span>):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        淡入动画结束</div><div class="line">        :return:</div><div class="line">        "<span class="string">""</span></div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeInAniFinished <span class="subst">=</span> <span class="literal">True</span></div><div class="line"> </div><div class="line">    def _setFadeOutAniFinished(<span class="built_in">self</span>):</div><div class="line">        <span class="string">""</span><span class="string">"</span></div><div class="line">        淡出动画结束</div><div class="line">        :return:</div><div class="line">        "<span class="string">""</span></div><div class="line">        super(TipsWindow, <span class="built_in">self</span>)<span class="built_in">.</span>setVisible(<span class="literal">False</span>)</div><div class="line">        <span class="built_in">self</span><span class="built_in">.</span>_fadeOutAniFinished <span class="subst">=</span> <span class="literal">True</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<p>把下面代码加到你自定义的Widget里面即可:</p>
<figure class="highlight]]>
    </summary>
    
      <category term="淡出淡入" scheme="http://moky.cc/tags/%E6%B7%A1%E5%87%BA%E6%B7%A1%E5%85%A5/"/>
    
      <category term="动画" scheme="http://moky.cc/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="PyQt" scheme="http://moky.cc/categories/PyQt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[PyQt中利用winapi禁用系统默认阴影]]></title>
    <link href="http://moky.cc/2015/07/08/PyQt%E4%B8%AD%E5%88%A9%E7%94%A8winapi%E7%A6%81%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E9%98%B4%E5%BD%B1/"/>
    <id>http://moky.cc/2015/07/08/PyQt中利用winapi禁用系统默认阴影/</id>
    <published>2015-07-08T08:48:48.000Z</published>
    <updated>2015-07-12T08:49:50.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">enableWindowShadow</span><span class="params">(hWnd, bool_enabled)</span>:</span></div><div class="line">    <span class="keyword">import</span> ctypes</div><div class="line">    GCL_STYLE = (-<span class="number">26</span>)</div><div class="line">    CS_DROPSHADOW = <span class="number">0x00020000</span></div><div class="line">    hWnd = ctypes.c_long(self.winId())</div><div class="line">    class_style = ctypes.windll.user32.GetClassLongA(hWnd, GCL_STYLE)</div><div class="line">    <span class="keyword">if</span> bool_enabled:</div><div class="line">        class_style |= CS_DROPSHADOW</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        class_style &= ~CS_DROPSHADOW</div><div class="line">    ctypes.windll.user32.SetClassLongA(hWnd, GCL_STYLE, class_style)</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="winapi" scheme="http://moky.cc/tags/winapi/"/>
    
      <category term="禁用阴影" scheme="http://moky.cc/tags/%E7%A6%81%E7%94%A8%E9%98%B4%E5%BD%B1/"/>
    
      <category term="PyQt" scheme="http://moky.cc/categories/PyQt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python中判断是否为Windows7或更高版本]]></title>
    <link href="http://moky.cc/2015/07/07/Python%E4%B8%AD%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BAWindows7%E6%88%96%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC/"/>
    <id>http://moky.cc/2015/07/07/Python中判断是否为Windows7或更高版本/</id>
    <published>2015-07-07T08:52:20.000Z</published>
    <updated>2015-07-12T08:53:17.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_windows7_orlater</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">import</span> platform</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> platform.system() != <span class="string">"Windows"</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    version = platform.win32_ver()</div><div class="line">    version_num = version[<span class="number">1</span>]</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        num = int(version_num[<span class="number">0</span>]) * <span class="number">10</span> + int(version_num[<span class="number">2</span>])</div><div class="line">    <span class="keyword">except</span> ValueError:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"> </div><div class="line">    <span class="keyword">if</span> num &gt;= <span class="number">61</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="系统版本判断" scheme="http://moky.cc/tags/%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%88%A4%E6%96%AD/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt制作Aero特效窗口]]></title>
    <link href="http://moky.cc/2015/07/06/Qt%E5%88%B6%E4%BD%9CAero%E7%89%B9%E6%95%88%E7%AA%97%E5%8F%A3/"/>
    <id>http://moky.cc/2015/07/06/Qt制作Aero特效窗口/</id>
    <published>2015-07-06T13:03:38.000Z</published>
    <updated>2015-07-13T13:08:33.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/huihui1988/article/details/5601497" title="http://blog.csdn.net/huihui1988/article/details/5601497" target="_blank" rel="external">http://blog.csdn.net/huihui1988/article/details/5601497</a></p>
</blockquote>
<p>初学QT，边看书边自己做点小东西。最近突然心血来潮，想自己做个小巧点的，界面美观一点的备忘当桌面上。想了半天，发现VISTA/WIN7的Aero效果就不错，况且自己现在就在用WIN7。于是上网找了下QT制作Aero效果的方法。Google之后终于找到了函数和用法。于是做了一个简单的Aero特效窗口。</p>
<p>以下是头文件和实现文件：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//qtwin.h  </span></div><div class="line"><span class="preprocessor">#ifndef QTWIN_H  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> QTWIN_H  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QColor&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QWidget&gt;  </span></div><div class="line"><span class="keyword">class</span> WindowNotifier;  </div><div class="line"><span class="keyword">class</span> QtWin  </div><div class="line">{  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> enableAeroWindow(QWidget *widget, <span class="keyword">bool</span> enable = <span class="keyword">true</span>);  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> extendFrameIntoClientArea(QWidget *widget,  </div><div class="line">                                          <span class="keyword">int</span> left = -<span class="number">1</span>, <span class="keyword">int</span> top = -<span class="number">1</span>,  </div><div class="line">                                          <span class="keyword">int</span> right = -<span class="number">1</span>, <span class="keyword">int</span> bottom = -<span class="number">1</span>);  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> isCompositionEnabled();  </div><div class="line">    <span class="keyword">static</span> QColor colorizatinColor();  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    <span class="keyword">static</span> WindowNotifier *windowNotifier();  </div><div class="line">};  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">// QTWIN_H</span></span></div></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//qtwin.cpp  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "qtwin.h"  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QLibrary&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QApplication&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QWidget&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QList&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QPointer&gt;  </span></div><div class="line"><span class="preprocessor">#ifdef Q_WS_WIN  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;qt_windows.h&gt;  </span></div><div class="line"><span class="comment">// Blur behind data structures  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DWM_BB_ENABLE                 0x00000001  <span class="comment">// fEnable has been specified  </span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DWM_BB_BLURREGION             0x00000002  <span class="comment">// hRgnBlur has been specified  </span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DWM_BB_TRANSITIONONMAXIMIZED  0x00000004  <span class="comment">// fTransitionOnMaximized has been specified  </span></span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> WM_DWMCOMPOSITIONCHANGED        0x031E    <span class="comment">// Composition changed window message  </span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _DWM_BLURBEHIND  </div><div class="line">{  </div><div class="line">    DWORD dwFlags;  </div><div class="line">    BOOL fEnable;  </div><div class="line">    HRGN hRgnBlur;  </div><div class="line">    BOOL fTransitionOnMaximized;  </div><div class="line">} DWM_BLURBEHIND, *PDWM_BLURBEHIND;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _MARGINS  </div><div class="line">{  </div><div class="line">    <span class="keyword">int</span> cxLeftWidth;  </div><div class="line">    <span class="keyword">int</span> cxRightWidth;  </div><div class="line">    <span class="keyword">int</span> cyTopHeight;  </div><div class="line">    <span class="keyword">int</span> cyBottomHeight;  </div><div class="line">} MARGINS, *PMARGINS;  </div><div class="line"><span class="keyword">typedef</span> HRESULT (WINAPI *PtrDwmIsCompositionEnabled)(BOOL* pfEnabled);  </div><div class="line"><span class="keyword">typedef</span> HRESULT (WINAPI *PtrDwmExtendFrameIntoClientArea)(HWND hWnd, <span class="keyword">const</span> MARGINS* pMarInset);  </div><div class="line"><span class="keyword">typedef</span> HRESULT (WINAPI *PtrDwmenableAeroWindow)(HWND hWnd, <span class="keyword">const</span> DWM_BLURBEHIND* pBlurBehind);  </div><div class="line"><span class="keyword">typedef</span> HRESULT (WINAPI *PtrDwmGetColorizationColor)(DWORD *pcrColorization, BOOL *pfOpaqueBlend);  </div><div class="line"><span class="keyword">static</span> PtrDwmIsCompositionEnabled pDwmIsCompositionEnabled= <span class="number">0</span>;  </div><div class="line"><span class="keyword">static</span> PtrDwmenableAeroWindow pDwmenableAeroWindow = <span class="number">0</span>;  </div><div class="line"><span class="keyword">static</span> PtrDwmExtendFrameIntoClientArea pDwmExtendFrameIntoClientArea = <span class="number">0</span>;  </div><div class="line"><span class="keyword">static</span> PtrDwmGetColorizationColor pDwmGetColorizationColor = <span class="number">0</span>;  </div><div class="line"><span class="comment">/* </span></div><div class="line"> *同步响应DWM状态消息 </div><div class="line"> */  </div><div class="line"><span class="keyword">class</span> WindowNotifier : <span class="keyword">public</span> QWidget  </div><div class="line">{  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    WindowNotifier() { winId(); }  </div><div class="line">    <span class="keyword">void</span> addWidget(QWidget *widget) { widgets.append(widget); }  </div><div class="line">    <span class="keyword">void</span> removeWidget(QWidget *widget) { widgets.removeAll(widget); }  </div><div class="line">    <span class="keyword">bool</span> winEvent(MSG *message, <span class="keyword">long</span> *result);  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    QWidgetList widgets;  </div><div class="line">};  </div><div class="line"><span class="keyword">static</span> <span class="keyword">bool</span> resolveLibs()  </div><div class="line">{  </div><div class="line">    <span class="keyword">if</span> (!pDwmIsCompositionEnabled) {  </div><div class="line">        QLibrary dwmLib(QString::fromAscii(<span class="string">"dwmapi"</span>));  </div><div class="line">        pDwmIsCompositionEnabled =(PtrDwmIsCompositionEnabled)dwmLib.resolve(<span class="string">"DwmIsCompositionEnabled"</span>);  </div><div class="line">        pDwmExtendFrameIntoClientArea = (PtrDwmExtendFrameIntoClientArea)dwmLib.resolve(<span class="string">"DwmExtendFrameIntoClientArea"</span>);  </div><div class="line">        pDwmenableAeroWindow = (PtrDwmenableAeroWindow)dwmLib.resolve(<span class="string">"DwmenableAeroWindow"</span>);  </div><div class="line">        pDwmGetColorizationColor = (PtrDwmGetColorizationColor)dwmLib.resolve(<span class="string">"DwmGetColorizationColor"</span>);  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span> pDwmIsCompositionEnabled != <span class="number">0</span>;  </div><div class="line">}  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  </span></div><div class="line"><span class="comment">/*! </span></div><div class="line">  * 检查 DWM 是否开启 </div><div class="line">  * </div><div class="line">  */  </div><div class="line"><span class="keyword">bool</span> QtWin::isCompositionEnabled()  </div><div class="line">{  </div><div class="line"><span class="preprocessor">#ifdef Q_WS_WIN  </span></div><div class="line">    <span class="keyword">if</span> (resolveLibs()) {  </div><div class="line">        HRESULT hr = S_OK;  </div><div class="line">        BOOL isEnabled = <span class="keyword">false</span>;  </div><div class="line">        hr = pDwmIsCompositionEnabled(&isEnabled);  </div><div class="line">        <span class="keyword">if</span> (SUCCEEDED(hr))  </div><div class="line">            <span class="keyword">return</span> isEnabled;  </div><div class="line">    }  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  </span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">}  </div><div class="line"><span class="comment">/*! </span></div><div class="line">  * 对一个widget实现Aero效果. </div><div class="line">  * </div><div class="line">  */  </div><div class="line"><span class="keyword">bool</span> QtWin::enableAeroWindow(QWidget *widget, <span class="keyword">bool</span> enable)  </div><div class="line">{  </div><div class="line">    Q_ASSERT(widget);  </div><div class="line">    <span class="keyword">bool</span> result = <span class="keyword">false</span>;  </div><div class="line"><span class="preprocessor">#ifdef Q_WS_WIN  </span></div><div class="line">    <span class="keyword">if</span> (resolveLibs()) {  </div><div class="line">        DWM_BLURBEHIND bb = {<span class="number">0</span>};  </div><div class="line">        HRESULT hr = S_OK;  </div><div class="line">        bb.fEnable = enable;  </div><div class="line">        bb.dwFlags = DWM_BB_ENABLE;  </div><div class="line">        bb.hRgnBlur = NULL;  </div><div class="line">        widget-&gt;setAttribute(Qt::WA_TranslucentBackground, enable);  </div><div class="line">        widget-&gt;setAttribute(Qt::WA_NoSystemBackground, enable);  </div><div class="line">        hr = pDwmenableAeroWindow(widget-&gt;winId(), &bb);  </div><div class="line">        <span class="keyword">if</span> (SUCCEEDED(hr)) {  </div><div class="line">            result = <span class="keyword">true</span>;  </div><div class="line">            windowNotifier()-&gt;addWidget(widget);  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  </span></div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">}  </div><div class="line"><span class="comment">/*! </span></div><div class="line">  * 设置Aero绘图区 </div><div class="line">  */  </div><div class="line"><span class="keyword">bool</span> QtWin::extendFrameIntoClientArea(QWidget *widget, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)  </div><div class="line">{  </div><div class="line">    Q_ASSERT(widget);  </div><div class="line">    Q_UNUSED(left);  </div><div class="line">    Q_UNUSED(top);  </div><div class="line">    Q_UNUSED(right);  </div><div class="line">    Q_UNUSED(bottom);  </div><div class="line">    <span class="keyword">bool</span> result = <span class="keyword">false</span>;  </div><div class="line"><span class="preprocessor">#ifdef Q_WS_WIN  </span></div><div class="line">    <span class="keyword">if</span> (resolveLibs()) {  </div><div class="line">        QLibrary dwmLib(QString::fromAscii(<span class="string">"dwmapi"</span>));  </div><div class="line">        HRESULT hr = S_OK;  </div><div class="line">        MARGINS m = {left, top, right, bottom};  </div><div class="line">        hr = pDwmExtendFrameIntoClientArea(widget-&gt;winId(), &m);  </div><div class="line">        <span class="keyword">if</span> (SUCCEEDED(hr)) {  </div><div class="line">            result = <span class="keyword">true</span>;  </div><div class="line">            windowNotifier()-&gt;addWidget(widget);  </div><div class="line">        }  </div><div class="line">        widget-&gt;setAttribute(Qt::WA_TranslucentBackground, result);  </div><div class="line">    }  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  </span></div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">}  </div><div class="line"><span class="comment">/*! </span></div><div class="line">  * 返回当前窗口颜色. </div><div class="line">  */  </div><div class="line">QColor QtWin::colorizatinColor()  </div><div class="line">{  </div><div class="line">    QColor resultColor = QApplication::palette().window().color();  </div><div class="line"><span class="preprocessor">#ifdef Q_WS_WIN  </span></div><div class="line">    <span class="keyword">if</span> (resolveLibs()) {  </div><div class="line">        DWORD color = <span class="number">0</span>;  </div><div class="line">        BOOL opaque = FALSE;  </div><div class="line">        QLibrary dwmLib(QString::fromAscii(<span class="string">"dwmapi"</span>));  </div><div class="line">        HRESULT hr = S_OK;  </div><div class="line">        hr = pDwmGetColorizationColor(&color, &opaque);  </div><div class="line">        <span class="keyword">if</span> (SUCCEEDED(hr))  </div><div class="line">            resultColor = QColor(color);  </div><div class="line">    }  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  </span></div><div class="line">    <span class="keyword">return</span> resultColor;  </div><div class="line">}  </div><div class="line"><span class="preprocessor">#ifdef Q_WS_WIN  </span></div><div class="line">WindowNotifier *QtWin::windowNotifier()  </div><div class="line">{  </div><div class="line">    <span class="keyword">static</span> WindowNotifier *windowNotifierInstance = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">if</span> (!windowNotifierInstance)  </div><div class="line">        windowNotifierInstance = <span class="keyword">new</span> WindowNotifier;  </div><div class="line">    <span class="keyword">return</span> windowNotifierInstance;  </div><div class="line">}  </div><div class="line"><span class="comment">/* 所有窗口响应 DWM 状态变换消息 */</span>  </div><div class="line"><span class="keyword">bool</span> WindowNotifier::winEvent(MSG *message, <span class="keyword">long</span> *result)  </div><div class="line">{  </div><div class="line">    <span class="keyword">if</span> (message && message-&gt;message == WM_DWMCOMPOSITIONCHANGED) {  </div><div class="line">        <span class="keyword">bool</span> compositionEnabled = QtWin::isCompositionEnabled();  </div><div class="line">        foreach(QWidget * widget, widgets) {  </div><div class="line">            <span class="keyword">if</span> (widget) {  </div><div class="line">                widget-&gt;setAttribute(Qt::WA_NoSystemBackground, compositionEnabled);  </div><div class="line">            }  </div><div class="line">            widget-&gt;update();  </div><div class="line">        }  </div><div class="line">    }  </div><div class="line">    <span class="keyword">return</span> QWidget::winEvent(message, result);  </div><div class="line">}  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QtGui/QApplication&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "widget.h"  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "qtwin.h"  </span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])  </div><div class="line">{  </div><div class="line">    QApplication a(argc, argv);  </div><div class="line">    Widget window;  </div><div class="line">    window.setGeometry(<span class="number">1040</span>,<span class="number">0</span>,<span class="number">240</span>,<span class="number">120</span>);  </div><div class="line">    window.setWindowFlags(Qt::CustomizeWindowHint);  </div><div class="line"><span class="preprocessor">#ifdef Q_WS_X11  </span></div><div class="line">    window.setAttribute(Qt::WA_TranslucentBackground);  </div><div class="line">    window.setAttribute(Qt::WA_NoSystemBackground, <span class="keyword">false</span>);  </div><div class="line">    QPalette pal = window.palette();  </div><div class="line">    QColor bg = pal.window().color();  </div><div class="line">    bg.setAlpha(<span class="number">180</span>);  </div><div class="line">    pal.setColor(QPalette::Window, bg);  </div><div class="line">    window.setPalette(pal);  </div><div class="line">    window.ensurePolished(); <span class="comment">// workaround Oxygen filling the background  </span></div><div class="line">    window.setAttribute(Qt::WA_StyledBackground, <span class="keyword">false</span>);  </div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span>  </span></div><div class="line">    <span class="keyword">if</span> (QtWin::isCompositionEnabled()) {  </div><div class="line">        QtWin::extendFrameIntoClientArea(&window);  </div><div class="line">        window.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  </div><div class="line">    }  </div><div class="line">    window.show();  </div><div class="line">    <span class="keyword">return</span> a.exec();  </div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/huihui1988/article/details/5601497" t]]>
    </summary>
    
      <category term="Aero" scheme="http://moky.cc/tags/Aero/"/>
    
      <category term="毛玻璃" scheme="http://moky.cc/tags/%E6%AF%9B%E7%8E%BB%E7%92%83/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何修改Qt标准对话框的文字(例如,英文改成中文)]]></title>
    <link href="http://moky.cc/2015/07/05/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Qt%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86%E7%9A%84%E6%96%87%E5%AD%97-%E4%BE%8B%E5%A6%82-%E8%8B%B1%E6%96%87%E6%94%B9%E6%88%90%E4%B8%AD%E6%96%87/"/>
    <id>http://moky.cc/2015/07/05/如何修改Qt标准对话框的文字-例如-英文改成中文/</id>
    <published>2015-07-05T13:11:24.000Z</published>
    <updated>2015-07-13T13:18:59.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/libaineu2004/article/details/19030129" title="http://blog.csdn.net/libaineu2004/article/details/19030129" target="_blank" rel="external">http://blog.csdn.net/libaineu2004/article/details/19030129</a></p>
</blockquote>
<p>此篇文章参考qtcn论坛整理而成，因为文字和图片是本人亲自组织，所以仍算原创。<br><a href="http://www.qtcn.org/bbs/read-htm-tid-30650.html" title="http://www.qtcn.org/bbs/read-htm-tid-30650.html" target="_blank" rel="external">http://www.qtcn.org/bbs/read-htm-tid-30650.html</a><br><a href="http://blog.csdn.net/yangxiao_0203/article/details/7488967" title="http://blog.csdn.net/yangxiao_0203/article/details/7488967" target="_blank" rel="external">http://blog.csdn.net/yangxiao_0203/article/details/7488967</a></p>
<p>如图所示，QT自带的内建标准对话框QFontDialog、QColorDialog、QMessageBox。默认的文字全是英文的。QLineEdit和QTextEdit的右键菜单，默认的文字也全是英文的。<br>请问，如何可以把文字修改成中文或其他语言文字？<br><img src="http://www.qtcn.org/bbs/attachment/Mon_1402/17_118943_58b40f8aeeb5310.png?16" alt=""></p>
<p><img src="http://www.qtcn.org/bbs/attachment/Mon_1402/17_118943_9743e39a4cbe620.png?20" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140410161351703" alt=""><br><br><br>解决方案如下：<br>简体中文的解决思路是打开Qt安装目录下的translations，找到qt_zh_CN.qm和qt_zh_CN.ts。<br>直接用qt_zh_CN.qm即可，如果确实有翻译不完全的，打开qt_zh_CN.ts翻译一下重新生成.qm文件即可。<br>即：把translation/qt_zh_CN.qm加载到QTranslator中。<br>其他国语言方法类似。<br><br><br>参考源码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "mainwindow.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QApplication&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QTranslator&gt;</span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</div><div class="line">{</div><div class="line">    QApplication a(argc, argv);</div><div class="line"> </div><div class="line">    <span class="comment">//加载Qt标准对话框的中文翻译文件</span></div><div class="line">    QTranslator tran;</div><div class="line">    <span class="keyword">bool</span> ok = tran.load(<span class="string">"qt_zh_CN.qm"</span>, <span class="string">"C:\\qt\\4.8.5_VS2010\\translations\\"</span>);<span class="comment">//注,这里使用的是绝对路径,建议把.qm拷贝到工程目录下,然后使用相对路径.</span></div><div class="line">    a.installTranslator(&tran);</div><div class="line"> </div><div class="line">    <span class="comment">//加载用户自定义的界面翻译文件</span></div><div class="line"> </div><div class="line">    QTranslator user;</div><div class="line">    ok = user.load(<span class="string">"user_zh.qm"</span>, <span class="string">":/"</span>);</div><div class="line">    a.installTranslator(&user);</div><div class="line"> </div><div class="line">    <span class="comment">//设置全局文字大小,非必需,根据自身情况使用</span></div><div class="line">    QFont font  = a.font();</div><div class="line">    font.setPointSize(<span class="number">9</span>);</div><div class="line">    a.setFont(font);</div><div class="line"> </div><div class="line">    MainWindow w;</div><div class="line">    w.show();</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br><br>最终效果图:<br><img src="http://img.blog.csdn.net/20140410161333046" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140410161348687" alt=""></p>
<p><img src="http://img.blog.csdn.net/20140410161345062" alt=""><br><br><br>如果软件想动态得切换语言，则需要定义一个全局函数供调用，举例如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "mainwindow.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QApplication&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QTranslator&gt;</span></div><div class="line"> </div><div class="line">QTranslator g_tran;<span class="comment">//必须设置成全局变量，如果是局部变量，设置将失效。</span></div><div class="line"> </div><div class="line"><span class="keyword">void</span> setLanguage(<span class="keyword">int</span> lan)<span class="comment">//全局函数，可供其他文件调用</span></div><div class="line">{</div><div class="line">    <span class="keyword">bool</span> ok = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (lan == <span class="number">1</span>)<span class="comment">//中文</span></div><div class="line">    {</div><div class="line">        ok = g_tran.load(<span class="string">"qt_zh_CN.qm"</span>, <span class="string">":/lan/"</span>);<span class="comment">//这里使用Qt资源文件,把.qm文件拷贝到项目路径/lan之下</span></div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (lan == <span class="number">2</span>)<span class="comment">//英文</span></div><div class="line">    {</div><div class="line">        ok = g_tran.load(<span class="string">""</span>, <span class="string">":/lan/"</span>);</div><div class="line">    }</div><div class="line"> </div><div class="line">    QCoreApplication::installTranslator(&g_tran);</div><div class="line">    <span class="comment">//或者写成qApp-&gt;installTranslator(&g_tran);</span></div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</div><div class="line">{</div><div class="line">    QApplication a(argc, argv);</div><div class="line"> </div><div class="line">    setLanguage(<span class="number">1</span>);<span class="comment">//调用全局函数</span></div><div class="line"> </div><div class="line">    MainWindow w;</div><div class="line">    w.show();</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/libaineu2004/article/details/19030129]]>
    </summary>
    
      <category term="汉化" scheme="http://moky.cc/tags/%E6%B1%89%E5%8C%96/"/>
    
      <category term="标准对话框" scheme="http://moky.cc/tags/%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[单例模式及C++实现代码]]></title>
    <link href="http://moky.cc/2015/07/04/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%8F%8AC-%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/"/>
    <id>http://moky.cc/2015/07/04/单例模式及C-实现代码/</id>
    <published>2015-07-04T13:20:59.000Z</published>
    <updated>2015-07-13T13:30:37.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/cxjchen/p/3148582.html" title="http://www.cnblogs.com/cxjchen/p/3148582.html" target="_blank" rel="external">http://www.cnblogs.com/cxjchen/p/3148582.html</a></p>
</blockquote>
<h2 id="单例模式">单例模式</h2>
<p>单例模式，可以说设计模式中最常应用的一种模式了，据说也是面试官最喜欢的题目。但是如果没有学过设计模式的人，可能不会想到要去应用单例模式，面对单例模式适用的情况，可能会优先考虑使用全局或者静态变量的方式，这样比较简单，也是没学过设计模式的人所能想到的最简单的方式了。</p>
<p>一般情况下，我们建立的一些类是属于工具性质的，基本不用存储太多的跟自身有关的数据，在这种情况下，每次都去new一个对象，即增加了开销，也使得代码更加臃肿。其实，我们只需要一个实例对象就可以。如果采用全局或者静态变量的方式，会影响封装性，难以保证别的代码不会对全局变量造成影响。</p>
<p>考虑到这些需要，我们将默认的构造函数声明为私有的，这样就不会被外部所new了，甚至可以将析构函数也声明为私有的，这样就只有自己能够删除自己了。在Java和C#这样纯的面向对象的语言中，单例模式非常好实现，直接就可以在静态区初始化instance，然后通过getInstance返回，这种就被称为饿汉式单例类。也有些写法是在getInstance中new instance然后返回，这种就被称为懒汉式单例类，但这涉及到第一次getInstance的一个判断问题。</p>
<p>下面的代码只是表示一下，跟具体哪种语言没有关系。</p>
<p>单线程中：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Singleton* getInstance()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (instance == NULL)</div><div class="line">        instance = <span class="keyword">new</span> Singleton();</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br><br>这样就可以了，保证只取得了一个实例。但是在多线程的环境下却不行了，因为很可能两个线程同时运行到if (instance == NULL)这一句，导致可能会产生两个实例。于是就要在代码中加锁。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Singleton* getInstance()</div><div class="line">{</div><div class="line">    lock();</div><div class="line">    <span class="keyword">if</span> (instance == NULL)</div><div class="line">    {</div><div class="line">       instance = <span class="keyword">new</span> Singleton();</div><div class="line">    }</div><div class="line">    unlock();</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br><br>但这样写的话，会稍稍映像性能，因为每次判断是否为空都需要被锁定，如果有很多线程的话，就爱会造成大量线程的阻塞。于是大神们又想出了双重锁定。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Singleton* getInstance()</div><div class="line">{</div><div class="line">    <span class="keyword">if</span> (instance == NULL)</div><div class="line">    {</div><div class="line">	lock();</div><div class="line">    	<span class="keyword">if</span> (instance == NULL)</div><div class="line">    	{</div><div class="line">       		instance = <span class="keyword">new</span> Singleton();</div><div class="line">    	}</div><div class="line">    	unlock();</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">}</div></pre></td></tr></table></figure>

<p><br><br>这样只够极低的几率下，通过越过了if (instance == NULL)的线程才会有进入锁定临界区的可能性，这种几率还是比较低的，不会阻塞太多的线程，但为了防止一个线程进入临界区创建实例，另外的线程也进去临界区创建实例，又加上了一道防御if (instance == NULL)，这样就确保不会重复创建了。<br><br></p>
<h2 id="常用的场景">常用的场景</h2>
<p>单例模式常常与工厂模式结合使用，因为工厂只需要创建产品实例就可以了，在多线程的环境下也不会造成任何的冲突，因此只需要一个工厂实例就可以了。<br><br></p>
<h2 id="优点">优点</h2>
<ol>
<li>减少了时间和空间的开销（new实例的开销）。</li>
<li>提高了封装性，使得外部不易改动实例。</li>
</ol>
<p><br></p>
<h2 id="缺点">缺点</h2>
<ol>
<li>懒汉式是以时间换空间的方式。</li>
<li>饿汉式是以空间换时间的方式。</li>
</ol>
<p><br></p>
<h2 id="C++实现代码">C++实现代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Singleton.h</span></div><div class="line"><span class="preprocessor">#ifndef _SINGLETON_H_</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> _SINGLETON_H_</span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> Singleton{</div><div class="line"><span class="keyword">public</span>:</div><div class="line">	<span class="keyword">static</span> Singleton* getInstance();</div><div class="line"> </div><div class="line"><span class="keyword">private</span>:</div><div class="line">	Singleton();</div><div class="line">	<span class="comment">//把复制构造函数和=操作符也设为私有,防止被复制</span></div><div class="line">	Singleton(<span class="keyword">const</span> Singleton&);</div><div class="line">	Singleton& <span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&);</div><div class="line"> </div><div class="line">	<span class="keyword">static</span> Singleton* instance;</div><div class="line">};</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Singleton.cpp</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "Singleton.h"</span></div><div class="line"> </div><div class="line">Singleton::Singleton(){</div><div class="line">}</div><div class="line"> </div><div class="line">Singleton::Singleton(<span class="keyword">const</span> Singleton&){</div><div class="line">}</div><div class="line"> </div><div class="line">Singleton& Singleton::<span class="keyword">operator</span>=(<span class="keyword">const</span> Singleton&){</div><div class="line">}</div><div class="line"> </div><div class="line"><span class="comment">//在此处初始化</span></div><div class="line">Singleton* Singleton::instance = <span class="keyword">new</span> Singleton();</div><div class="line">Singleton* Singleton::getInstance(){</div><div class="line">	<span class="keyword">return</span> instance;</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.cpp</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "Singleton.h"</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></div><div class="line">  </div><div class="line"><span class="keyword">int</span> main(){</div><div class="line">	Singleton* singleton1 = Singleton::getInstance();</div><div class="line">	Singleton* singleton2 = Singleton::getInstance();</div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (singleton1 == singleton2)</div><div class="line">		<span class="built_in">fprintf</span>(stderr,<span class="string">"singleton1 = singleton2\n"</span>);</div><div class="line"> </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://www.cnblogs.com/cxjchen/p/3148582.html" title="http]]>
    </summary>
    
      <category term="单例模式" scheme="http://moky.cc/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="singleton" scheme="http://moky.cc/tags/singleton/"/>
    
      <category term="C++" scheme="http://moky.cc/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 Python ConfigParser 的文件编码问题]]></title>
    <link href="http://moky.cc/2015/07/03/%E8%A7%A3%E5%86%B3-Python-ConfigParser-%E7%9A%84%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://moky.cc/2015/07/03/解决-Python-ConfigParser-的文件编码问题/</id>
    <published>2015-07-03T13:32:25.000Z</published>
    <updated>2015-07-13T13:35:15.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://laochake.iteye.com/blog/443704" title="http://laochake.iteye.com/blog/443704" target="_blank" rel="external">http://laochake.iteye.com/blog/443704</a></p>
</blockquote>
<p>配置文件编码为UTF-8，内容如下：<br>Cfg.ini代码:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">[section1]</span>  </div><div class="line"><span class="setting">p1=<span class="value">中文字符串</span></span></div></pre></td></tr></table></figure>

<p>如果用<code>config.readfp(open(&#39;cfg.ini&#39;))</code>，会出现乱码问题</p>
<p>因为open函数不能指定编码，所以改用<code>codecs.open</code>，指定编码为utf-8，在eclipse pydev下测试通过。</p>
<p>但因为UTF-8文本文件有两种格式：<code>带BOM</code>和<code>不带BOM</code></p>
<p>而windows 记事本保存时只支持带BOM格式，为了兼容用记事本编辑过的文件能被正确读取，<br>最好把编码指定为<code>utf-8-sig</code>，完整的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codecs  </div><div class="line"><span class="keyword">import</span> ConfigParser  </div><div class="line"> </div><div class="line">cfgfile=<span class="string">"cfg.ini"</span>  </div><div class="line">config = ConfigParser.ConfigParser()  </div><div class="line">config.readfp(codecs.open(cfgfile, <span class="string">"r"</span>, <span class="string">"utf-8-sig"</span>))  </div><div class="line">p1 = config.get(<span class="string">"section1"</span>,<span class="string">"p1"</span>)  </div><div class="line"><span class="keyword">print</span> p1</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://laochake.iteye.com/blog/443704" title="http://laoch]]>
    </summary>
    
      <category term="ConfigParser" scheme="http://moky.cc/tags/ConfigParser/"/>
    
      <category term="文件编码" scheme="http://moky.cc/tags/%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt非window子窗体的透明度设置]]></title>
    <link href="http://moky.cc/2015/07/02/Qt%E9%9D%9Ewindow%E5%AD%90%E7%AA%97%E4%BD%93%E7%9A%84%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%BE%E7%BD%AE/"/>
    <id>http://moky.cc/2015/07/02/Qt非window子窗体的透明度设置/</id>
    <published>2015-07-02T13:44:15.000Z</published>
    <updated>2015-07-13T13:50:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/6780551" title="http://blog.csdn.net/yiyaaixuexi/article/details/6780551" target="_blank" rel="external">http://blog.csdn.net/yiyaaixuexi/article/details/6780551</a></p>
</blockquote>
<h2 id="问题的由来">问题的由来</h2>
<p>心血来潮，想利用<code>QTimer</code>配合<code>setWindowOpacity()</code>方法来实现一个窗体淡入的效果。<br><br></p>
<h2 id="实验代码">实验代码</h2>
<p>粗糙的实验代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> Widget::on_pushButton_clicked()  </div><div class="line">{  </div><div class="line">   QTimer *timerOpacity = <span class="keyword">new</span> QTimer(<span class="keyword">this</span>);  </div><div class="line">   connect(timerOpacity,SIGNAL(timeout()),<span class="keyword">this</span>,SLOT(changeOpacity()));  </div><div class="line">   timerOpacity-&gt;start(<span class="number">100</span>);  </div><div class="line">}  </div><div class="line">  </div><div class="line"><span class="keyword">void</span> Widget::changeOpacity()  </div><div class="line">{  </div><div class="line">    <span class="keyword">if</span> (opalevel &gt; <span class="number">8</span>) <span class="keyword">return</span>;  </div><div class="line">    <span class="keyword">double</span> opacity[<span class="number">9</span>] =  {<span class="number">0.9</span>,<span class="number">0.8</span>,<span class="number">0.7</span>,<span class="number">0.6</span>,<span class="number">0.5</span>,<span class="number">0.4</span>,<span class="number">0.3</span>,<span class="number">0.2</span>,<span class="number">0.1</span>};  </div><div class="line">    ui-&gt;stackedWidget-&gt;setWindowOpacity(opacity[opalevel]);  </div><div class="line">    ui-&gt;widget-&gt;setWindowOpacity(opacity[opalevel]);  </div><div class="line">    <span class="keyword">this</span>-&gt;setWindowOpacity(opacity[opalevel]);  </div><div class="line">  </div><div class="line">    qDebug()&lt;&lt;<span class="string">"opalevel = "</span>&lt;&lt; opalevel &lt;&lt;<span class="string">" ui-&gt;widget opacity:"</span>&lt;&lt;ui-&gt;widget-&gt;windowOpacity();  </div><div class="line">    qDebug()&lt;&lt;<span class="string">"opalevel = "</span>&lt;&lt; opalevel &lt;&lt;<span class="string">" ui-&gt;stackedWidget opacity:"</span>&lt;&lt;ui-&gt;stackedWidget-&gt;windowOpacity();  </div><div class="line">    qDebug()&lt;&lt;<span class="string">"opalevel = "</span>&lt;&lt; opalevel &lt;&lt;<span class="string">" ui opacity : "</span>&lt;&lt; <span class="keyword">this</span>-&gt;windowOpacity()&lt;&lt;endl;  </div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="实验失败">实验失败</h2>
<p>现象是主窗体的有淡入的效果，即透明度有变化，但是子窗体没有，opacity始终为1 。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Log</span> ：</div><div class="line">opalevel <span class="subst">=</span>  <span class="number">0</span>  ui<span class="subst">-&gt;</span>widget opacity: <span class="number">1</span> </div><div class="line">opalevel <span class="subst">=</span>  <span class="number">0</span>  ui<span class="subst">-&gt;</span>stackedWidget opacity: <span class="number">1</span> </div><div class="line">opalevel <span class="subst">=</span>  <span class="number">0</span>  ui opacity  <span class="number">0.898039</span> </div><div class="line"><span class="attribute">...</span><span class="attribute">...</span></div><div class="line"> </div><div class="line">opalevel <span class="subst">=</span>  <span class="number">8</span>  ui<span class="subst">-&gt;</span>widget opacity: <span class="number">1</span> </div><div class="line">opalevel <span class="subst">=</span>  <span class="number">8</span>  ui<span class="subst">-&gt;</span>stackedWidget opacity: <span class="number">1</span> </div><div class="line">opalevel <span class="subst">=</span>  <span class="number">8</span>  ui opacity  <span class="number">0.0980392</span></div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="失败原因">失败原因</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> QWidget::setWindowOpacity(qreal opacity)  </div><div class="line">{  </div><div class="line">    Q_D(QWidget);  </div><div class="line">    <span class="keyword">if</span> (!isWindow())  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line"><span class="comment">//...  </span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="解决方案">解决方案</h2>
<p><code>QGraphicsOpacityEffect</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/ in the constructor  </div><div class="line">opacityEffect = <span class="keyword">new</span> QGraphicsOpacityEffect;  </div><div class="line">ui-&gt;widget-&gt;setGraphicsEffect(opacityEffect);  </div><div class="line">...  </div><div class="line"><span class="comment">// in changeOpacity()  </span></div><div class="line">opacityEffect-&gt;setOpacity(opacity[opalevel]);</div></pre></td></tr></table></figure>

<p><br></p>
<h2 id="效果图">效果图</h2>
<p><img src="http://hi.csdn.net/attachment/201109/15/6157840_1316107114d55K.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/yiyaaixuexi/article/details/6780551" ]]>
    </summary>
    
      <category term="透明度" scheme="http://moky.cc/tags/%E9%80%8F%E6%98%8E%E5%BA%A6/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++之类的前置声明]]></title>
    <link href="http://moky.cc/2015/07/01/C-%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%89%8D%E7%BD%AE%E5%A3%B0%E6%98%8E/"/>
    <id>http://moky.cc/2015/07/01/C-之类的前置声明/</id>
    <published>2015-07-01T13:51:00.000Z</published>
    <updated>2015-07-13T13:56:28.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/fjb2080/article/details/5533514" title="http://blog.csdn.net/fjb2080/article/details/5533514" target="_blank" rel="external">http://blog.csdn.net/fjb2080/article/details/5533514</a></p>
</blockquote>
<p>刚开始学习c++的人都会遇到这样的问题：<br>定义一个类 class A，这个类里面使用了类B的对象b，然后定义了一个类B，里面也包含了一个类A的对象a，就成了这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.h  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "b.h"  </span></div><div class="line"><span class="keyword">class</span> A  </div><div class="line">{  </div><div class="line">....  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    B b;  </div><div class="line">};  </div><div class="line"><span class="comment">//b.h  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "a.h"  </span></div><div class="line"><span class="keyword">class</span> B  </div><div class="line">{  </div><div class="line">....  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    A a;  </div><div class="line">};</div></pre></td></tr></table></figure>

<p>一编译，就出现了一个互包含的问题了，这时就有人跳出来说，这个问题的解决办法可以这样，在a.h文件中声明类B，然后使用B的指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.h   </span></div><div class="line"><span class="comment">//#include "b.h"  </span></div><div class="line"><span class="keyword">class</span> B;   </div><div class="line"><span class="keyword">class</span> A   </div><div class="line">{  </div><div class="line"> ....   </div><div class="line"><span class="keyword">private</span>:  </div><div class="line"> B b;   </div><div class="line">};   </div><div class="line"><span class="comment">//b.h   </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "a.h"   </span></div><div class="line"><span class="keyword">class</span> B  </div><div class="line">{  </div><div class="line"> ....   </div><div class="line"><span class="keyword">private</span>:  </div><div class="line"> A a;   </div><div class="line">};</div></pre></td></tr></table></figure>

<p>然后，问题就解决了。</p>
<p>但是，有人知道问题是为什么就被解决的吗，也就是说，加了个前置声明为什么就解决了这样的问题。下面，让我来探讨一下这个前置声明。</p>
<p>类的前置声明是有许多的好处的。</p>
<p>我们使用前置声明的一个好处是，从上面看到，当我们在类A使用类B的前置声明时，我们修改类B时，只需要重新编译类B，而不需要重新编译a.h的（当然，在真正使用类B时，必须包含b.h）。</p>
<p>另外一个好处是减小类A的大小，上面的代码没有体现，那么我们来看下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a.h  </span></div><div class="line"><span class="keyword">class</span> B;  </div><div class="line"><span class="keyword">class</span> A  </div><div class="line">{  </div><div class="line">    ....  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    B *b;  </div><div class="line">....  </div><div class="line">};  </div><div class="line"><span class="comment">//b.h  </span></div><div class="line"><span class="keyword">class</span> B  </div><div class="line">{  </div><div class="line">....  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    <span class="keyword">int</span> a;  </div><div class="line">    <span class="keyword">int</span> b;  </div><div class="line">    <span class="keyword">int</span> c;  </div><div class="line">};</div></pre></td></tr></table></figure>

<p>我们看上面的代码，类B的大小是12（在32位机子上）。</p>
<p>如果我们在类A中包含的是B的对象，那么类A的大小就是12（假设没有其它成员变量和虚函数）。如果包含的是类B的指针*b变量，那么类A的大小就是4，所以这样是可以减少类A的大小的，特别是对于在STL的容器里包含的是类的对象而不是指针的时候，这个就特别有用了。</p>
<p>在前置声明时，我们只能使用的就是类的指针和引用（因为引用也是居于指针的实现的）。</p>
<p>那么，我问你一个问题，为什么我们前置声明时，只能使用类型的指针和引用呢？</p>
<p>如果你回答到：那是因为指针是固定大小，并且可以表示任意的类型，那么可以给你80分了。为什么只有80分，因为还没有完全回答到。</p>
<p>想要更详细的答案，我们看下下面这个类：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> A  </div><div class="line">{  </div><div class="line"><span class="keyword">public</span>:  </div><div class="line">    A(<span class="keyword">int</span> a):_a(a),_b(_a){} <span class="comment">// _b is new add  </span></div><div class="line"> </div><div class="line">    <span class="keyword">int</span> get_a() <span class="keyword">const</span> {<span class="keyword">return</span> _a;}  </div><div class="line">    <span class="keyword">int</span> get_b() <span class="keyword">const</span> {<span class="keyword">return</span> _b;} <span class="comment">// new add  </span></div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    <span class="keyword">int</span> _b; <span class="comment">// new add  </span></div><div class="line">    <span class="keyword">int</span> _a;  </div><div class="line">};</div></pre></td></tr></table></figure>

<p>我们看下上面定义的这个类A，其中_b变量和get_b()函数是新增加进这个类的。</p>
<p>那么我问你，在增加进_b变量和get_b()成员函数后这个类发生了什么改变，思考一下再回答。</p>
<p>好了，我们来列举这些改变：</p>
<p>第一个改变当然是增加了_b变量和get_b()成员函数；</p>
<p>第二个改变是这个类的大小改变了，原来是4，现在是8。</p>
<p>第三个改变是成员_a的偏移地址改变了，原来相对于类的偏移是0，现在是4了。</p>
<p>上面的改变都是我们显式的、看得到的改变。还有一个隐藏的改变，想想是什么。。。</p>
<p>这个隐藏的改变是类A的默认构造函数和默认拷贝构造函数发生了改变。</p>
<p>由上面的改变可以看到，任何调用类A的成员变量或成员函数的行为都需要改变，因此，我们的a.h需要重新编译。</p>
<p>如果我们的b.h是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//b.h  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> "a.h"  </span></div><div class="line"><span class="keyword">class</span> B  </div><div class="line">{  </div><div class="line">...  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    A a;  </div><div class="line">};</div></pre></td></tr></table></figure>

<p>那么我们的b.h也需要重新编译。</p>
<p>如果是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//b.h  </span></div><div class="line"><span class="keyword">class</span> A;  </div><div class="line"><span class="keyword">class</span> B  </div><div class="line">{  </div><div class="line">...  </div><div class="line"><span class="keyword">private</span>:  </div><div class="line">    A *a;  </div><div class="line">};</div></pre></td></tr></table></figure>

<p>那么我们的b.h就不需要重新编译。</p>
<p>像我们这样前置声明类A：<br><code>class A;</code></p>
<p>是一种不完整的声明，只要类B中没有执行需要了解类A的大小或者成员的操作，则这样的不完整声明允许声明指向A的指针和引用。</p>
<p>而在前一个代码中的语句<br><code>A a;</code></p>
<p>是需要了解A的大小的，不然是不可能知道如果给类B分配内存大小的，因此不完整的前置声明就不行，必须要包含a.h来获得类A的大小，同时也要重新编译类B。</p>
<p>再回到前面的问题，使用前置声明只允许的声明是指针或引用的一个原因是只要这个声明没有执行需要了解类A的大小或者成员的操作就可以了，所以声明成指针或引用是没有执行需要了解类A的大小或者成员的操作的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/fjb2080/article/details/5533514" titl]]>
    </summary>
    
      <category term="前置声明" scheme="http://moky.cc/tags/%E5%89%8D%E7%BD%AE%E5%A3%B0%E6%98%8E/"/>
    
      <category term="C++" scheme="http://moky.cc/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt里的postEvent]]></title>
    <link href="http://moky.cc/2015/06/30/Qt%E9%87%8C%E7%9A%84postEvent/"/>
    <id>http://moky.cc/2015/06/30/Qt里的postEvent/</id>
    <published>2015-06-30T12:32:29.000Z</published>
    <updated>2015-07-15T12:36:16.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/dreamtdp/article/details/7545620" title="http://blog.csdn.net/dreamtdp/article/details/7545620" target="_blank" rel="external">http://blog.csdn.net/dreamtdp/article/details/7545620</a></p>
</blockquote>
<p>呵呵，转载了这么多别人的关于Event方面的文章，我也来说说两三句吧</p>
<p>前几天一直被这个postEvent给困扰着，所以主要讲解postEvent的个人理解吧，随便稍微提一下其他的实现机制。</p>
<p>Qt中抛消息有：信号和槽、postEvent、sentEvent等机制，sentEvent只支持同步的。postEvent可以实现异步的，其机制是将消息发送到消息队列中，消息队列又会把这些消息都抛出(当然要实现该功能我们也可以用信号和槽机制，将connect函数的最后一个参数设置为Qt::QueuedConnection即可)。</p>
<p>言归正传，上段我们说到消息队列把消息抛出来，我们该如何去捕获该消息呢？我们只要实现父类中的event()或者customEvent()函数即可，在里面实现我们自己的处理，在此建议采用customEvent()。</p>
<p>以下是一个简单的实例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QWidget&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QEvent&gt;</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> QEvent::Type CustomEvent_Login = (QEvent::Type)<span class="number">5001</span>;<span class="comment">//建议用5000以上唯一的标识</span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> PostEvent : <span class="keyword">public</span> QWidget</div><div class="line">{</div><div class="line">Q_OBJECT</div><div class="line"> </div><div class="line"><span class="keyword">public</span>:</div><div class="line">PostEvent(QWidget *parent = <span class="number">0</span>);</div><div class="line">~PostEvent();</div><div class="line"> </div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="keyword">void</span> customEvent(QEvent *e); <span class="comment">//该函数是父类QWidget的虚函数</span></div><div class="line"> </div><div class="line">};</div><div class="line"> </div><div class="line">PostEvent::PostEvent(QWidget *parent)</div><div class="line">{</div><div class="line">QApplication::postEvent(<span class="keyword">this</span>, <span class="keyword">new</span> QEvent(CustomEvent_Login));</div><div class="line"><span class="comment">//该函数实现将自定义的消息发送到队列，且new QEvent(CustomEvent_Login))只能动态分配，原因请看Qt的帮助文档中的postEvent函数说明。</span></div><div class="line">}</div><div class="line"> </div><div class="line"><span class="keyword">void</span> PostEvent::customEvent(QEvent *e)</div><div class="line">{</div><div class="line"><span class="keyword">if</span> (e-&gt;type() == CustomEvent_Login) <span class="comment">//捕获消息</span></div><div class="line">{</div><div class="line">QMessageBox msgBox;</div><div class="line">msgBox.setText(<span class="string">"The document has been modified."</span>);</div><div class="line">msgBox.exec();</div><div class="line">}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>呵呵，就这样吧 本人一开始犯了一个很白痴的错误，即把customEvent函数当作用户可以自定义的函数，殊不知是父类中的虚函数，所以一直捕获不到消息。好了，以上只是一个简单的关于postEvent的一个应用，如果想了解更多的消息机制请阅读其他关于event的文章。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/dreamtdp/article/details/7545620" tit]]>
    </summary>
    
      <category term="postEvent" scheme="http://moky.cc/tags/postEvent/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[程序员修炼之道之Visual Studio的TODO用法]]></title>
    <link href="http://moky.cc/2015/06/29/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E4%B9%8BVisual-Studio%E7%9A%84TODO%E7%94%A8%E6%B3%95/"/>
    <id>http://moky.cc/2015/06/29/程序员修炼之道之Visual-Studio的TODO用法/</id>
    <published>2015-06-29T12:47:02.000Z</published>
    <updated>2015-07-15T12:58:24.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_681fac2801014flm.html" title="http://blog.sina.com.cn/s/blog_681fac2801014flm.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_681fac2801014flm.html</a></p>
</blockquote>
<p>经常使用eclipse的TODO，用于标识出还未完成的的任务，如:<code>//TODO</code></p>
<p>这时eclipse中就会在代码行右边打上一个蓝色标记，方便你下次看到还未完成的地方。（还有//FIXME 也可以）</p>
<p>Visual Studio也提供//TODO标记，不过不会在右边标记处明显标识，需要你选择view进行查看。方法如下：</p>
<p>1.首先在你还未完成的地方打上TODO标记，以下方式均可：</p>
<ol>
<li>//TODO:还有未完成的代码</li>
<li>//todo:something to do.</li>
<li>//Todo something<br>以上方式Visual Studio都能识别</li>
</ol>
<p>2.选择 view, Task List进行查看整个工程的todo。也可以使用快捷键Ctrl+W,T  如下：<br><img src="http://i.imgur.com/4HGzqrm.jpg" alt=""></p>
<p>一定要选择comments才能看到<br><img src="http://i.imgur.com/sXP29CD.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_681fac2801014flm.html" titl]]>
    </summary>
    
      <category term="TODO" scheme="http://moky.cc/tags/TODO/"/>
    
      <category term="Visual Studio" scheme="http://moky.cc/tags/Visual-Studio/"/>
    
      <category term="杂类" scheme="http://moky.cc/categories/%E6%9D%82%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Qt中如何进行DEBUG和使用cout,cin等]]></title>
    <link href="http://moky.cc/2015/06/28/Qt%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8CDEBUG%E5%92%8C%E4%BD%BF%E7%94%A8cout-cin%E7%AD%89/"/>
    <id>http://moky.cc/2015/06/28/Qt中如何进行DEBUG和使用cout-cin等/</id>
    <published>2015-06-28T13:00:49.000Z</published>
    <updated>2015-07-15T13:03:21.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://socol.iteye.com/blog/719500" title="http://socol.iteye.com/blog/719500" target="_blank" rel="external">http://socol.iteye.com/blog/719500</a></p>
</blockquote>
<p>如果想输出DEBUG信息：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">qDebug() &lt;&lt; <span class="string">"Date:"</span> &lt;&lt; QDate::currentDate();  </div><div class="line">qDebug() &lt;&lt; <span class="string">"Types:"</span> &lt;&lt; QString(<span class="string">"String"</span>) &lt;&lt; QChar(<span class="string">'x'</span>) &lt;&lt; QRect(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">40</span>);  </div><div class="line">qDebug() &lt;&lt; <span class="string">"Custom coordinate type:"</span> &lt;&lt; coordinate;</div></pre></td></tr></table></figure>

<p><br><br>如果想使用，COUT/IN需要使用QTextStream的重载</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QApplication&gt;  </span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QTextStream&gt;  </span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])  </div><div class="line">{  </div><div class="line">    QApplication app(argc, argv);  </div><div class="line">    QTextStream out(stdout)；  </div><div class="line">    out &lt;&lt; <span class="string">"is QTextStream out "</span> &lt;&lt; endl;  </div><div class="line">    <span class="keyword">return</span> app.exec();  </div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://socol.iteye.com/blog/719500" title="http://socol.it]]>
    </summary>
    
      <category term="debug" scheme="http://moky.cc/tags/debug/"/>
    
      <category term="cout" scheme="http://moky.cc/tags/cout/"/>
    
      <category term="cin" scheme="http://moky.cc/tags/cin/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python*与**参数问题]]></title>
    <link href="http://moky.cc/2015/06/27/Python-%E4%B8%8E-%E5%8F%82%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://moky.cc/2015/06/27/Python-与-参数问题/</id>
    <published>2015-06-27T13:04:29.000Z</published>
    <updated>2015-07-15T13:09:25.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_7dc317590101cbkr.html" title="http://blog.sina.com.cn/s/blog_7dc317590101cbkr.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_7dc317590101cbkr.html</a></p>
</blockquote>
<h2 id="问题">问题</h2>
<p>Python的函数定义中有两种特殊的情况，即出现*，**的形式。<br>如：<code>def myfun1(username, *keys)</code>或<code>def myfun2(username, **keys)</code>等。<br><br></p>
<h2 id="解释">解释</h2>
<p>* 用来传递任意个无名字参数，这些参数会一个Tuple的形式访问。<br>**用来处理传递任意个有名字的参数，这些参数用dict来访问。<br><br></p>
<h2 id="应用">应用</h2>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#########################</span></div><div class="line"> </div><div class="line"><span class="comment"># “*” 的应用</span></div><div class="line"> </div><div class="line"><span class="comment">#########################</span></div><div class="line"> </div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(*keys)</span>:</span></div><div class="line"><span class="prompt">... </span>    <span class="keyword">print</span> <span class="string">"keys type=%s"</span> % type(keys)</div><div class="line"><span class="prompt">... </span>    <span class="keyword">print</span> <span class="string">"keys=%s"</span> % str(keys)</div><div class="line"><span class="prompt">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(keys)):</div><div class="line"><span class="prompt">... </span>            <span class="keyword">print</span> <span class="string">"keys["</span> + str(i) + <span class="string">"]=%s"</span> % str(keys[i])</div><div class="line">...</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>fun1(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div><div class="line">输出以下结果：</div><div class="line"> </div><div class="line">keys type=</div><div class="line">keys=(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">keys[<span class="number">0</span>]=<span class="number">2</span></div><div class="line">keys[<span class="number">1</span>]=<span class="number">3</span></div><div class="line">keys[<span class="number">2</span>]=<span class="number">4</span></div><div class="line">keys[<span class="number">3</span>]=<span class="number">5</span></div><div class="line"> </div><div class="line"><span class="comment">#########################</span></div><div class="line"> </div><div class="line"><span class="comment"># “**” 的应用</span></div><div class="line"> </div><div class="line"><span class="comment">#########################</span></div><div class="line"> </div><div class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(**keys)</span>:</span></div><div class="line"><span class="prompt">... </span>    <span class="keyword">print</span> <span class="string">"keys type=%s"</span> % type(keys)</div><div class="line"><span class="prompt">... </span>    <span class="keyword">print</span> <span class="string">"keys=%s"</span> % str(keys)</div><div class="line"><span class="prompt">... </span>    <span class="keyword">print</span> <span class="string">"name=%s"</span> % str(keys[<span class="string">'name'</span>])</div><div class="line">...</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>fun2(name=<span class="string">"vp"</span>, age=<span class="number">19</span>)</div><div class="line"> </div><div class="line">输出以下结果：</div><div class="line">keys type=</div><div class="line">keys={<span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'name'</span>: <span class="string">'vp'</span>}</div><div class="line">name=vp</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.sina.com.cn/s/blog_7dc317590101cbkr.html" titl]]>
    </summary>
    
      <category term="星号" scheme="http://moky.cc/tags/%E6%98%9F%E5%8F%B7/"/>
    
      <category term="参数" scheme="http://moky.cc/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="Python" scheme="http://moky.cc/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[拦截Qt关闭窗口的CloseEvent]]></title>
    <link href="http://moky.cc/2015/06/26/%E6%8B%A6%E6%88%AAQt%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E7%9A%84CloseEvent/"/>
    <id>http://moky.cc/2015/06/26/拦截Qt关闭窗口的CloseEvent/</id>
    <published>2015-06-26T13:11:55.000Z</published>
    <updated>2015-07-15T13:15:29.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/vah101/article/details/6133728" title="http://blog.csdn.net/vah101/article/details/6133728" target="_blank" rel="external">http://blog.csdn.net/vah101/article/details/6133728</a></p>
</blockquote>
<p>QDialog类下有一个虚函数<br><code>void QDialog::closeEvent (  QCloseEvent   *  e   )  [virtual protected]</code></p>
<p>通过实现closeEvent函数，就可以以对关闭窗口消息进行拦截，比如程序还没有完成工作时，可以弹出警告窗口，即使用户确认退出操作</p>
<p>在头文件中，需要加入#include <qcloseevent>：</qcloseevent></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#ifndef TEST_H</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> TEST_H</span></div><div class="line"> </div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QDialog&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;QCloseEvent&gt;</span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> ClientTest : <span class="keyword">public</span> QDialog</div><div class="line">{</div><div class="line">    Q_OBJECT</div><div class="line"> </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    ClientTest();</div><div class="line">    <span class="keyword">void</span> closeEvent(QCloseEvent *event);</div><div class="line"><span class="comment">//后边的具体实现省略</span></div><div class="line"><span class="comment">//...</span></div><div class="line">};</div><div class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></div></pre></td></tr></table></figure>

<p><br><br>在cpp文件中，对closeEvent函数进行实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ClientTest::closeEvent(QCloseEvent *event)</div><div class="line">{</div><div class="line">    QMessageBox::StandardButton button;</div><div class="line">    button = QMessageBox::question(<span class="keyword">this</span>, tr(<span class="string">"退出程序"</span>),</div><div class="line">        QString(tr(<span class="string">"警告：程序有一个任务正在运行中，是否结束操作退出?"</span>)),</div><div class="line">        QMessageBox::Yes | QMessageBox::No);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (button == QMessageBox::No) {</div><div class="line">        event-&gt;ignore();  <span class="comment">//忽略退出信号，程序继续运行</span></div><div class="line">    }</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (button == QMessageBox::Yes) {</div><div class="line">        event-&gt;accept();  <span class="comment">//接受退出信号，程序退出</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>【转】原创作品，允许转载。转载时请务必以超链接形式标明文章原始出处、作者信息和本声明，否则将追究法律责任。<br><a href="http://blog.csdn.net/vah101/article/details/6133728" title]]>
    </summary>
    
      <category term="CloseEvent" scheme="http://moky.cc/tags/CloseEvent/"/>
    
      <category term="关闭窗口" scheme="http://moky.cc/tags/%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3/"/>
    
      <category term="Qt" scheme="http://moky.cc/categories/Qt/"/>
    
  </entry>
  
</feed>
